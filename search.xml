<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[面试笔记]]></title>
    <url>%2F2019%2F03%2F04%2F%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[面试问题 说说web安全有哪些漏洞SQL注入XSS开源框架上传漏洞未授权访问逻辑漏洞（水平权限和垂直权限）弱密码CSRFSSRF 什么是sql注入，怎么防御防御预编译、使用存储过程、检查数据类型、使用安全函数 办公网安全体系建设与研究我的项目是办公网安全体系建设，因为毕设，我们老师没有要求很大，只要我做出双因子认证在办公网实施就行应付毕设，让我自己思考办公网安全体系建设和树立安全的大局观，而不是针对某个方向。就从我在实习的时候，负责一家公司的渗透测试，当开始做这家公司的时候，黑河测试。从这家公司信息收集开始，发现这家公司对外暴露的业务，都过多过少有安全防御，能地域大量攻击，随着时间和空间维度拉伸，发现该公司并没有明确的边界划分与隔离，公司内部开发系统，内部管理，公司wiki。采用另一个域名，通过信息再收集，从而内部大量系统直接暴露给攻击者，内部系统ip端口开放也很随意，从而公司的受攻击面也大量提高。之后给他们公司提出了建议，做出内网隔离，做好内网隔离是企业安全的基础。通过对公司的资产分析，明确我们要保护的目标，通过对安全域的划分，确定安全边界，划分内网和外网，把公司只能内部人访问的如：OA系统，业务后台，服务器控制收入到范围受限，严格管控的内网，严格控制办公网对生产网络的访问，同时在对生产网内部进行隔离的基础上进行边界防护及检测。所有服务器非业务端口全部对互联网关闭，管理端口只能通过内部堡垒机访问，必须要对互联网开启的端口要严格做好IP（或者帐号）白名单访问控制。但是仅仅依靠单存的边界防护，一旦某个防护不当便会导致全盘崩溃——所谓“千里之堤毁于蚁穴”是也，认为做好了隔离而忽略了内网的防御，就很容易出现一旦有机器在公网暴露就会被轻松攻破。在资源有限的情况下优先做内网隔离，但是纵深防御也是十分必要的。白帽子讲web安全说过，纵深防御在不同的层面、不同方面实施安全方案实施一个整体的解决方案，这时需要考虑到主机安全，web应用安全，终端系统安全，数据库安全等等。像腾讯安全应急中心说过的河防体系安全是一个持续的过程，没有绝对的安全。攻击和防御是不断对抗，不断发展的。某个时期安全策略，新的攻击出现之后就会失效，从而又推出新的安全策略。一个企业的安全体系建设，要依靠自己公司的业务规模，安全需求考虑。一个刚发展的公司，不可能需要像美国五角大楼那种安全防护，一般的公司，现有公司最好的资源最大化利用率就是最好网络隔离和纵深防御。 风险评估风险分析，除了评估造成损失大小，还要评估对事件发生的可能性，危险程度。DREAD模型Damage PotentialReproducibilityExpliotiablityAffect userDiscoverability五个方面去评估 有没有了解soap注入基于XML语言开发。一个简单的SOAP消息包含:Envelope: 标识XML文档，具有名称空间和编码详细信息。标题：包含标题信息，如内容类型和字符集等。正文：包含请求和响应信息.故障：错误和状态信息SOAP请求易受SQL注入攻击，提交参数作为变种 sql查询可以泄露敏感信息白名单：虽然列表只允许某些字符通过，但在此列表中添加admin等字符会使应用程序只接收列出的字符。过滤：其中涉及通过删除不需要的字符（例如admin’OR’1 = 1’’）来过滤用户输入 – 将被清理，以便只有admin通过它。 xml注入是什么呢XSS 防御对于用户输入相关的数据出入到html中后，被当成html代码一部分执行，混淆了页面原本的语义，产生了新的语义 存储型XSS数据库中存有的存在XSS攻击的数据，返回给客户端。若数据未经过任何转义。被浏览器渲染。就可能导致XSS攻击 反射型XSS将用户输入的存在XSS攻击的数据，发送给后台，后台并未对数据进行存储，也未经过任何过滤，直接返回给客户端。被浏览器渲染。就可能导致XSS攻击 防御策略从输入到输出都需要过滤、转义 输入:客户端求情参数：包括用户输入，url参数、post参数 在产品形态上，针对不同输入类型，对输入做变量类型限制eg：整形输入的，强制整形输入字符串类型的数据：，需要针对&lt;、&gt;、/、’、”、&amp;五个字符进行实体化转义 输出：客户端对用户的输入做了过滤、转义，攻击者一样可能，通过截包，转发等手段，修改你的请求包体 HtmlEncode：Encode的作用是将输入的一些字符进行转化，使得浏览器在最终输出结果上是一样的，但能够防止注入的JavaScript执行 JavaScriptEncode：JavaScriptEncode的作用可以是将输入数据中除了数字、字母外的所有字符进行十六进制化处理，使得浏览器最终输出结果上是一样的，但能够防止注入的JavaScript执行 CSSEncode：当输入数据变量出现在标签内或其它css的执行环境中时，XSS的注入和防御原理同JavaScript URLEncode：可以采用对输入变量进行URLEncode的方法。URLEncode的作用是将字符转化为%HH的形式 空格 --&gt; %20 &lt; --&gt; %3c &gt; --&gt; %3e 说说ssl协议握手过程说下SSRF漏洞的原理，php中触发原理（php哪些函数会导致此漏洞)一种由攻击者构造形成由服务端发起请求的一个安全漏洞原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制攻击者可以利用 SSRF 实现的攻击主要有 5 种：可以对外网、服务器所在内网、本地进行端口扫描，获取一些服务的 banner 信息攻击运行在内网或本地的应用程序（比如溢出）对内网 WEB 应用进行指纹识别，通过访问默认文件实现攻击内外网的 web 应用，主要是使用 GET 参数就可以实现的攻击（比如 Struts2，sqli 等）利用 file 协议读取本地文件等 说下csrf漏洞的原理，防御方案跨站请求伪造，攻击者构造预测的链接发送个受害者，迫使受害者执行未授权的行为。在业界目前防御 CSRF 攻击主要有三种策略：验证 HTTP Referer 字段；在请求地址中添加 token 并验证；在 HTTP 头中自定义属性并验证随机性——不可预测一次性——每次请求后要更新，不能共用、复用保密性——敏感操作使用post，防止参数在url中泄露 用python写过什么安全小工具，怎么写的？这里简单描述下行了缓冲区溢出的原理是什么应急响应过程应急响应学习渗透实战，并了解应急响应流程。应急响应流程可分为两类：实时性应急响应和入侵后应急响应；实时性应急响应：大多为DDOS攻击，首要进行流量分析，若流量打满，能做的就是反查攻击IP，逆向渗透；若网络设备会话数被打满或者主机系统的CPU、内存、会话数被打满，可通过交换机做端口镜像，使用wireshark、tcpdump进行抓包，分析流量特征，确认攻击类型，在网络设备或安全设备上做相应阻断策略；攻击后应急响应：通过分析恶意文件和日志，查找入侵来源IP和入侵者所利用的漏洞，提出漏洞修补方案，并逆向追踪入侵者；应急响应对工程师的要求较为复杂，需多熟悉不同操作系统、应用、中间件、数据库特性，且能熟练使用编程语言或者vim等编辑器对较大的日志进行数据整理，还需要日常多多积累各种攻击特征和防护策略； 怎么定位木马文件，以及木马上传点应急过程自动化http和https优点1 内容加密：建立一个信息安全通道，确保信息传输安全；2 身份认证：确保网站的真实性；3 数据完整性校验：防止内容被第三方冒充或者篡改 tcp、udp区别TCP的优点： 可靠，稳定TCP的可靠体现在TCP在传递数据之前，会有三次握手来建立连接，而且在数据传递时，有确认、窗口、重传、拥塞控制机制，在数据传完后，还会断开连接用来节约系统资源。 TCP的缺点： 慢，效率低，占用系统资源高，易被攻击TCP在传递数据之前，要先建连接，这会消耗时间，而且在数据传递时，确认机制、重传机制、拥塞控制机制等都会消耗大量的时间，而且要在每台设备上维护所有的传输连接，事实上，每个连接都会占用系统的CPU、内存等硬件资源。而且，因为TCP有确认机制、三次握手机制，这些也导致TCP容易被人利用，实现DOS、DDOS、CC等攻击。 UDP的优点： 快，比TCP稍安全UDP没有TCP的握手、确认、窗口、重传、拥塞控制等机制，UDP是一个无状态的传输协议，所以它在传递数据时非常快。没有TCP的这些机制，UDP较TCP被攻击者利用的漏洞就要少一些。但UDP也是无法避免攻击的，比如：UDP Flood攻击……UDP的缺点： 不可靠，不稳定因为UDP没有TCP那些可靠的机制，在数据传递时，如果网络质量不好，就会很容易丢包。基于上面的优缺点，那么： 线程和进程区别，共享变量是不是安全的。最小权限Linux通常希望进程只拥有足够完成其工作的特权，而不希望赋予更多的特权给它，最小特权”就是收缩进程所享有的特权，以防进程滥用特权 什么是访问控制访问控制是网络安全防范和保护的主要策略主要是保证网络资源不被非法使用和非法访问。问控制模型可分为: 传统的访问控制模型(DAC\MAC\ACL)、基于角色的访问控制(RBAC) 模型、基于任务和工作流的访问控制(TBAC) 模型、基于任务和角色的访问控制(T-RBAC) 模型等 访问控制列表ACL:每一项资源，都配有一个列表，这个列表记录的就是哪些用户可以对这项资源执行CRUD中的那些操作.当系统试图访问这项资源时，会首先检查这个列表中是否有关于当前用户的访问权限，从而确定当前用户可否执行相应的操作 基于角色的访问控制RBAC:RBAC是把用户按角色进行归类，通过用户的角色来确定用户能否针对某项资源进行某项操作,使用户和权限关联起来。使得对用户的授权管理变得非常简单和易于维护。osi7层模型与纵深防御对于网络工程师来说这是一个大问题。纵深防御可以从两个不同的角度来解释这个概念。首先，从分层安全机制的高度来理解，将其称作纵深防御。纵深防御是标准的方法论，它从三个层次强调安全需求：管理、技术和业务。在分层之前，建立纵深防御更注重的是策略和程序，而不是实际保护资源的安全机制。纵深防御包括物理安全和人为安全。正如问题所述，OSI模型是解释纵深防御概念的基础。大家应该都知道纵深防御意味着使用多种途径和多种保护方法实现安全保护。可以通过讨论OSI模型各层所采取的防护来了解纵深防御。作为公司，他会为物理线路聘用一个巡线员（第一层），在交换机上坐端口安全（第二层），在边界路由器上作访问列表（第三层），在防火墙中建立非管制区和包过滤（第四层）设置IDS/IDP监测/阻拦（第三~第七），建立SSL通道（第六层），设置内容过滤（第七层），提供AAA服务（第七层），进行漏洞扫描（第四~第七）和病毒扫描（第七层）等…]]></content>
      <categories>
        <category>面试题</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>安全面试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mac笔记]]></title>
    <url>%2F2019%2F03%2F04%2Fmac%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[1.terminal代理翻墙Proxychains4 安装Proxychains1brew install proxychains-ng 配置config： Mac下用Homebrew安装的默认为/usr/local/etc/proxychains.conf 12345678910111213141516$ vim proxychains.confquiet_modedynamic_chainchain_len = 1 #round_robin_chain和random_chain使用proxy_dnsremote_dns_subnet 224tcp_read_time_out 15000tcp_connect_time_out 8000localnet 127.0.0.0/255.0.0.0localnet 10.0.0.0/255.0.0.0localnet 172.16.0.0/255.240.0.0localnet 192.168.0.0/255.255.0.0[ProxyList]socks5 127.0.0.1 1086http 127.0.0.1 1087 效果tips：mac 10.13以上需关闭sip 重启Mac，按住Option键进入启动盘选择模式，再按⌘ + R进入Recovery模式。实用工具（Utilities）-&gt; 终端（Terminal）。输入命令csrutil disable运行。重启进入系统后，终端里输入 csrutil status，结果中如果有 System Integrity Protection status:disabled. 则说明关闭成功 dsa]]></content>
  </entry>
  <entry>
    <title><![CDATA[hexo-next主题美化(持续更新)]]></title>
    <url>%2F2019%2F02%2F10%2Fhexo-next%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%2F</url>
    <content type="text"><![CDATA[主页文章添加阴影效果效果图：打开\themes\next\source\css_custom\custom.styl向里面加入：1234567.post &#123; margin-top: 60px; margin-bottom: 60px; padding: 25px; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5); &#125; 文章结尾效果在路径 \themes\next\layout_macro 中新建 passage-end-tag.swig 文件,并添加以下内容：12345&lt;div&gt; &#123;% if not is_index %&#125; &lt;div style=&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt;------------- 本文结束 &lt;i class=&quot;fa fa-heart&quot;&gt;&lt;/i&gt; 感谢您的阅读 -------------&lt;/div&gt; &#123;% endif %&#125;&lt;/div&gt; 接着打开\themes\next\layout_macro\post.swig文件，在post-body 之后， post-footer 之前添加如下画红色部分代码（post-footer之前两个DIV）12345&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include &apos;passage-end-tag.swig&apos; %&#125; &#123;% endif %&#125;&lt;/div&gt; 完成后效果： 文章加密访问打开themes-&gt;next-&gt;layout-&gt;_partials-&gt;head.swig文件，在以下位置插入这样一段代码：1234567891011121314&lt;script&gt; (function () &#123; if (&apos;&#123;&#123; page.password &#125;&#125;&apos;) &#123; if (prompt(&apos;请输入文章密码&apos;) !== &apos;&#123;&#123; page.password &#125;&#125;&apos;) &#123; alert(&apos;密码错误！&apos;); if (history.length === 1) &#123; location.replace(&quot;https://evenyao.com&quot;); // 这里替换成你的首页 &#125; else &#123; history.back(); &#125; &#125; &#125; &#125;)();&lt;/script&gt; 然后在要加密的文章上添加password属性，后面则是跟想要设置的密码，类似这样： 文章版权说明在目录 next/layout/_macro/下添加 my-copyright.swig：123456789101112131415161718192021222324252627282930&#123;% if page.copyright %&#125;&lt;div class=&quot;my_post_copyright&quot;&gt; &lt;script src=&quot;//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js&quot;&gt;&lt;/script&gt; &lt;!-- JS库 sweetalert 可修改路径 --&gt; &lt;script src=&quot;https://cdn.bootcss.com/jquery/2.0.0/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://unpkg.com/sweetalert/dist/sweetalert.min.js&quot;&gt;&lt;/script&gt; &lt;p&gt;&lt;span&gt;本文标题:&lt;/span&gt;&lt;a href=&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot;&gt;&#123;&#123; page.title &#125;&#125;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;文章作者:&lt;/span&gt;&lt;a href=&quot;/&quot; title=&quot;访问 &#123;&#123; theme.author &#125;&#125; 的个人博客&quot;&gt;&#123;&#123; theme.author &#125;&#125;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;发布时间:&lt;/span&gt;&#123;&#123; page.date.format(&quot;YYYY年MM月DD日 - HH:mm&quot;) &#125;&#125;&lt;/p&gt; &lt;p&gt;&lt;span&gt;最后更新:&lt;/span&gt;&#123;&#123; page.updated.format(&quot;YYYY年MM月DD日 - HH:mm&quot;) &#125;&#125;&lt;/p&gt; &lt;p&gt;&lt;span&gt;原始链接:&lt;/span&gt;&lt;a href=&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot; title=&quot;&#123;&#123; page.title &#125;&#125;&quot;&gt;&#123;&#123; page.permalink &#125;&#125;&lt;/a&gt; &lt;span class=&quot;copy-path&quot; title=&quot;点击复制文章链接&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; data-clipboard-text=&quot;&#123;&#123; page.permalink &#125;&#125;&quot; aria-label=&quot;复制成功！&quot;&gt;&lt;/i&gt;&lt;/span&gt; &lt;/p&gt; &lt;p&gt;&lt;span&gt;许可协议:&lt;/span&gt;&lt;i class=&quot;fa fa-creative-commons&quot;&gt;&lt;/i&gt; &lt;a rel=&quot;license&quot; href=&quot;https://creativecommons.org/licenses/by-nc-nd/4.0/&quot; target=&quot;_blank&quot; title=&quot;Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)&quot;&gt;署名-非商业性使用-禁止演绎 4.0 国际&lt;/a&gt; 转载请保留原文链接及作者。&lt;/p&gt; &lt;/div&gt;&lt;script&gt; var clipboard = new Clipboard(&apos;.fa-clipboard&apos;); $(&quot;.fa-clipboard&quot;).click(function()&#123; clipboard.on(&apos;success&apos;, function()&#123; swal(&#123; title: &quot;&quot;, text: &apos;复制成功&apos;, icon: &quot;success&quot;, showConfirmButton: true &#125;); &#125;); &#125;); &lt;/script&gt;&#123;% endif %&#125; 在目录next/source/css/_common/components/post/下添加my-post-copyright.styl123456789101112131415161718192021222324252627282930313233343536373839404142434445.my_post_copyright &#123; width: 85%; max-width: 45em; margin: 2.8em auto 0; padding: 0.5em 1.0em; border: 1px solid #d3d3d3; font-size: 0.93rem; line-height: 1.6em; word-break: break-all; background: rgba(255,255,255,0.4);&#125;.my_post_copyright p&#123;margin:0;&#125;.my_post_copyright span &#123; display: inline-block; width: 5.2em; color: #b5b5b5; font-weight: bold;&#125;.my_post_copyright .raw &#123; margin-left: 1em; width: 5em;&#125;.my_post_copyright a &#123; color: #808080; border-bottom:0;&#125;.my_post_copyright a:hover &#123; color: #a3d2a3; text-decoration: underline;&#125;.my_post_copyright:hover .fa-clipboard &#123; color: #000;&#125;.my_post_copyright .post-url:hover &#123; font-weight: normal;&#125;.my_post_copyright .copy-path &#123; margin-left: 1em; width: 1em; +mobile()&#123;display:none;&#125;&#125;.my_post_copyright .copy-path:hover &#123; color: #808080; cursor: pointer;&#125; 修改next/layout/_macro/post.swig，在代码12345&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include &apos;wechat-subscriber.swig&apos; %&#125; &#123;% endif %&#125;&lt;/div&gt; 之前添加增加如下代码：12345&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include &apos;my-copyright.swig&apos; %&#125; &#123;% endif %&#125;&lt;/div&gt; 如下修改next/source/css/_common/components/post/post.styl文件，在最后一行增加代码：1@import &quot;my-post-copyright&quot; 保存重新生成即可。如果要在该博文下面增加版权信息的显示，需要在 Markdown 中增加copyright: true的设置如果你觉得每次都要输入copyright: true很麻烦的话,那么在/scaffolds/post.md文件中添加]]></content>
      <tags>
        <tag>美化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexoeditor强大的hexo博客工具]]></title>
    <url>%2F2019%2F02%2F07%2Fhexoeditor%E5%BC%BA%E5%A4%A7%E7%9A%84hexo%E5%8D%9A%E5%AE%A2%E5%B7%A5%E5%85%B7%2F</url>
    <content type="text"><![CDATA[HexoEditor是由zhuzhuyule继承Moeditor进而开发的hexoeditor，支持hexo部署，七牛，腾讯云一键上传图片，对于国内用户非常方便。项目地址:Github HexoEditor使用Hexo _config.yml支持 hexo源中的快速新帖子 快速修改文件名（在Hexo Post Edit中） 快速部署帖子 快速HEXO命令hexo d，hexo g，hexo s，hexo clean支持图片国内网站直接快速上传： 自动将图像更改为Markdown 支持拖动图像 支持粘贴剪贴板图像 支持图像云（一步上传） 支持SM.MS 支持齐牛 腾讯 GitHub额外扩展： TeX数学表达式 UML图 编辑中的代码突出显示 读/写/预览模式 自定义字体/行高/字体大小 自定义主题 代码突出显示主题（由highlight.js提供支持）效果展示!]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[端口常见漏洞(持续更新)]]></title>
    <url>%2F2019%2F01%2F21%2F%E7%AB%AF%E5%8F%A3%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E%2F</url>
    <content type="text"><![CDATA[端口介绍逻辑意义上的端口，一般是指TCP/IP协议中的端口，端口号的范围从0到655351.公认端口：0-1023，他们紧密绑定了一些服务，端口的通讯明确表明了某种服务的协议，许多服务绑定于这些端口，这些端口同样用于许多其它目的；2.注册端口：1024-49151，他们松散的绑定了一些服务；3.动态/私有：49152-65535，不为服务分配这些端口；一些端口常常会被黑客利用，还会被一些木马病毒利用，对计算机系统进行攻击，很多木马工具也有特定的端口。 0x00 在给某公司做渗透测试时，该公司主要依靠阿里云服务器，依靠阿里云顿，很多测试工具进行渗透扫描漏洞时，会被及时封ip。很多时候不得不自己写脚本来测试是否存在漏洞，或者已知版本漏洞是否可以利用。单遇到端口这块时，该公司用的是阿里云服务器，生产网服务器都对应有外部ip，生产网很多项目需要开放大量端口同步。这就造成了一个ip可能开放了将近20-30端口。很多端口服务对应已知漏洞，需要每次自己都要去查，慢慢的就积累下了很多端口对应漏洞。也会在以后的遇到新漏洞，持续更新到本文章. 端口渗透通常我们在进行端口渗透时，通常关注： 端口的banner信息 端口上运行的服务 端口运行服务存在已知的漏洞 端口 服务 存在漏洞 21/22/69 ftp/tftp：文件传输协议 爆破 嗅探溢出；后门 22 ssh：远程连接 爆破OpenSSH28个退格 23 telnet：远程连接 爆破嗅探 25 smtp：邮件服务 邮件伪造 53 DNS：域名系统 DNS区域传输DNS劫持DNS缓存投毒DNS欺骗 67/68 dhcp 劫持,欺骗 110 pop3 爆破 139 samba 爆破未授权访问远程代码执行 143 imap 爆破 161 snmp 爆破 389 ldap 注入攻击未授权访问 512/513/514 linux r 直接使用rlogin 873 rsync 未授权访问 1080 socket 爆破：进行内网渗透 1352 lotus 爆破：弱口令信息泄漏：源代码 1433 mssql 爆破：使用系统用户登录,注入攻击 1521 oracle 爆破：TNS注入攻击 2049 nfs 配置不当 2181 zookeeper 未授权访问 3306 mysql 爆破拒绝服务注入 4848 glassfish 爆破：控制台弱口令 认证绕过 5000 sybase/DB2 爆破注入 5432 postgresql 缓冲区溢出注入攻击爆破：弱口令 5632 pcanywhere 拒绝服务代码执行 5900 vnc 爆破：弱口令认证绕过 6379 redis 未授权访问,爆破：弱口令 7001 weblogic Java反序列化控制台弱口令控制台部署webshell 80/443/8080 web 常见web攻击对应服务器版本漏洞 8069 zabbix 远程命令执行 9090 websphere控制台 爆破：控制台弱口令,java反序列 9200/9300 elasticsearch 远程代码执行 11211 memcacache 未授权访问 27017 mongodb 爆破未授权访问 上述表格转自【作者: Hurricane Security】Hurricane Security]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>端口</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[编写python-nmap多线程扫描器]]></title>
    <url>%2F2019%2F01%2F10%2Fpython-nmap%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%89%AB%E6%8F%8F%E5%99%A8%2F</url>
    <content type="text"><![CDATA[python-nmap相关描述1234python-nmap是一个使用nmap进行端口扫描的python库。它可以很轻易的生成nmap扫描报告，并且可以帮助系统管理员进行自动化扫描任务和生成报告。同时，它也支持nmap脚本输出python。 安装使用pip安装 pip install python-nmap常用的使用方法import nmap # 导入 nmap.py 模块nm = nmap.PortScanner() # 实例化nmap.PortScanner对象nm.scan(‘127.0.0.1’, ‘22-443’) # 扫描127.0.0.1,端口号从22至443nm.command_line() # 获取当前执行扫描的命令行: nmap -oX - -p 22-443 127.0.0.1nm.scaninfo() # 获取nmap扫描信息 {‘tcp’: {‘services’: ‘22-443’, ‘method’: ‘connect’}}nm.all_hosts() # 获取所有已经扫描的主机nm[‘127.0.0.1’].hostname() # 获取一个主机127.0.0.1的主机名，通常为用户记录nm[‘127.0.0.1’].hostnames() # 获取主机127.0.0.1的主机名列表，返回一个字典类型 # [{‘name’:’hostname1’, ‘type’:’PTR’}, {‘name’:’hostname2’, ‘type’:’user’}]nm[‘127.0.0.1’].state() # 获取主机127.0.0.1的状态 (up|down|unknown|skipped)nm[‘127.0.0.1’].all_protocols() # 获取执行的协议 [‘tcp’, ‘udp’] 包含 (ip|tcp|udp|sctp)nm[‘127.0.0.1’][‘tcp’].keys() # 获取tcp协议所有的端口号nm[‘127.0.0.1’].all_tcp() # 获取tcp协议所有的端口号 (按照端口号大小进行排序)nm[‘127.0.0.1’].all_udp() # 获取udp协议所有的端口号 (按照端口号大小进行排序)nm[‘127.0.0.1’].all_sctp() # 获取sctp协议所有的端口号 (按照端口号大小进行排序)nm[‘127.0.0.1’].has_tcp(22) # 主机127.0.0.1是否有关于22端口的任何信息nm[‘127.0.0.1’][‘tcp’][22] # 获取主机127.0.0.1关于22端口的信息nm[‘127.0.0.1’].tcp(22) # 获取主机127.0.0.1关于22端口的信息nm[‘127.0.0.1’][‘tcp’][22][‘state’] # 获取主机22端口的状态 (open) python通过调用本地nmap扫描功能进行扫描，以json格式输出,可以由下看到输出的格式。我们后续就可以提取想要的信息。 123456789101112&#123;&apos;nmap&apos;:&#123;&apos;command_line&apos;: &apos;nmap -oX - -n -Pn -sT -sV -p 22 106.15.94.206&apos;, &apos;scaninfo&apos;: &#123;&apos;tcp&apos;: &#123;&apos;method&apos;: &apos;connect&apos;, &apos;services&apos;: &apos;22&apos;&#125;&#125;,&apos;scanstats&apos;: &#123;&apos;timestr&apos;: &apos;Wed Feb 13 13:20:33 2019&apos;, &apos;elapsed&apos;: &apos;0.62&apos;, &apos;uphosts&apos;: &apos;1&apos;, &apos;downhosts&apos;: &apos;0&apos;, &apos;totalhosts&apos;: &apos;1&apos;&#125;&#125;, &apos;scan&apos;: &#123;&apos;106.15.94.206&apos;:&#123;&apos;hostnames&apos;: [&#123;&apos;name&apos;: &apos;&apos;, &apos;type&apos;: &apos;&apos;&#125;], &apos;addresses&apos;: &#123;&apos;ipv4&apos;: &apos;106.15.94.206&apos;&#125;, &apos;vendor&apos;: &#123;&#125;,&apos;status&apos;: &#123;&apos;state&apos;: &apos;up&apos;, &apos;reason&apos;: &apos;user-set&apos;&#125;, &apos;tcp&apos;: &#123;22: &#123;&apos;state&apos;: &apos;open&apos;, &apos;reason&apos;: &apos;syn-ack&apos;, &apos;name&apos;: &apos;ssh&apos;, &apos;product&apos;: &apos;OpenSSH&apos;, &apos;version&apos;: &apos;7.4&apos;, &apos;extrainfo&apos;: &apos;protocol 2.0&apos;, &apos;conf&apos;: &apos;10&apos;, &apos;cpe&apos;: &apos;cpe:/a:openbsd:openssh:7.4&apos;&#125;&#125;&#125;&#125;&#125; portsscan 打造多线程端口扫描器读取ip列表,返回iplist：1234def read_iplist(inputfile): with open(inputfile,&apos;r&apos;) as ip_list: lists = ip_list.read().splitlines() return lists 设置最大线程数：thread_max_num = threading.Semaphore(thread_no)每个线程对应一个ip123456def start(): iplist = read_iplist(input_file) print(&apos;ip列表中共有ip&#123;&#125;个&apos;.format(len(iplist))) for ip in iplist: t = threading.Thread(target=scan_port, args=(ip, output_file)) t.start() 我们需要输出ip；端口；端口类型；服务；这四个模块，根据上面返回json格式，我们提取相应信息；123456789for i in port_list: if (scaninfos[&apos;scan&apos;][ip][&apos;tcp&apos;][i][&apos;state&apos;] == &apos;open&apos;): port_name = scaninfos[&apos;scan&apos;][ip][&apos;tcp&apos;][i][&apos;name&apos;] version = scaninfos[&apos;scan&apos;][ip][&apos;tcp&apos;][i][&apos;extrainfo&apos;] if scaninfos[&apos;scan&apos;][ip][&apos;tcp&apos;][i][ &apos;extrainfo&apos;] != &apos;&apos; else &apos;unknow version&apos; product = scaninfos[&apos;scan&apos;][ip][&apos;tcp&apos;][i][&apos;product&apos;] port_service = &apos;product: &apos; + product + &apos; version:&apos; + version info = [ip, i, &apos;tcp&apos;, port_name, port_service] write_csv(info, outfile=outfile) 输出结果：本项目已同步到github：https://github.com/teazmh/portscan]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>nmap</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[渗透测试过程（持续更新）]]></title>
    <url>%2F2019%2F01%2F10%2F%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E8%BF%87%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[渗透测试]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用户密码重置找回 10 种常见姿势]]></title>
    <url>%2F2018%2F05%2F30%2F%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81%E9%87%8D%E7%BD%AE%E7%9A%8410%E7%A7%8D%E5%A7%BF%E5%8A%BF%2F</url>
    <content type="text"><![CDATA[用户密码重置找回 10 种常见姿势说明： 用户名密码找回通常存在逻辑漏洞，读者因根据实际情况找出相应的漏洞 本片文章是参考补天白帽众学任意用户密码重置的10种姿势视频总结的笔记。视频链接:http://loudong.360.cn/School/content/id/214 1.验证码不失效2.本地验证绕过3.验证码直接返回4.验证码未绑定用户5.修改接受验证码的手机或邮箱6.跳过验证步骤7.未校验用户字段的值8.修改密码处 id 可替换9.cookie 值的替换10.修改信息时替换字段值]]></content>
      <categories>
        <category>逻辑漏洞</category>
      </categories>
      <tags>
        <tag>逻辑漏洞</tag>
        <tag>修改密码</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sqli-lab学习笔记less6-7（双重查询）]]></title>
    <url>%2F2018%2F05%2F07%2F%E5%8F%8C%E9%87%8D%E6%B3%A8%E5%85%A5%E6%9F%A5%E8%AF%A2%2F</url>
    <content type="text"><![CDATA[双重注入查询:相关函数介绍：对于双重查询，需要先了解count，rand（），floor函数功能以及group by语法用法1.concat函数用法concat（string1，string2，string3）将string1，string2，string3字符串连接起来输出（orcle只允许2个字符串）2.count函数我们可以用 select from information_schema.schemata ,来查询当前数据库信息再根据count函数，我们可以得知当前数据库总数，count函数就是列出当前指定值的数目，count（） freom information_schema.schamata中列出数据库的记录数 3.rand（）函数由下图可以看到，selecr rand（）返回的结果是小于1的随机小数. 4.floor（）函数用法floor向下取整 5.group by 用法 GROUP BY 语句用于结合合计函数，根据一个或多个列对结果集进行分组 双重查询原理研究人员发现，使用group by结合rand（）以及count（*）这样聚集函数，在sql查询时会出现错误，这种错误随机产生，这样就产生的双重查询注入，使用floor函数只是为了将查询结果分类。下面我们来结果几个函数用法,看几个简单的组合 SELECT floor(rand()2);我们从里向外看。rand() 返回大于0小于1的小数，乘以2之后就成了小于0小于2了。然后对结果进行取证。就只能是0或1了。也就是这个查询的结果不是1，就是0采用如果 SELECT CONCAT((SELECT database()), FLOOR(RAND()2)); select database()返回用户名，再与floor取整函数取得数字相连，floor（rand（））不是0就是1，所以结果又随机两种，SELECT CONCAT((SELECT database()), FLOOR(RAND()*2))a from user; 如果后面跟一个表名，那么就会返回一个集合，集合大小由表本生条数决定。我的数据库有3个管理员，所以就会返回3条记录。我们选择information_schema.tables表来查询，因为表数据多，产生较多的随机数,然后group by 分组显示出来select concat ((select database())), floor(rand()*2))as a from information_schema.tables group by a;其中concat（）as a 是将查询到的结果取一个别名，然后根据别名分组。 这样mysql0分到一组，mysql1分到一组。就只有两种结果了最后再结合count（*），聚集函数，则会有可能报错，但是注意到报错信息所附带我们需要的信息，而不是正常的报错信息。所以就产生了双重查询12SELECT count(*),CONCAT((SELECT user()), FLOOR(RAND()*2))as a from information_schema.tables group by a;(查询当前用户)SELECT count(*),CONCAT((SELECT version()), FLOOR(RAND()*2))as a from information_schema.tables group by a;（查询数据库版本 深层原理：http://wooyun.jozxing.cc/static/drops/tips-14312.html 大神分享的对于less-6 payload1$ http://127.0.0.1/sqli/Less-6/?id=1&quot; union select count(*),1,concat(0x3a,(select database()),0x3a,floor(rand(0)*2))a from information_schema.tables group by a--+ less-5 payload1$ http://127.0.0.1/sqli/Less-5/?id=1&apos; and 1=( select count(*) from information_schema.tables group by concat(0x3a,(select database()),0x3a,floor(rand(0)*2))) --+]]></content>
      <categories>
        <category>sql</category>
      </categories>
      <tags>
        <tag>sqli-lab</tag>
        <tag>双重查询</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[openvas]]></title>
    <url>%2F2018%2F02%2F07%2Fopenvas%2F</url>
    <content type="text"><![CDATA[openvas软件介绍OpenVAS是一款开放式的漏洞评估工具，主要用来检测目标网络或主机的安全性，OpenVAS能够基于C/S(客户端/服务器),B/S(浏览器/服务器)架构进行工作，管理员通过浏览器或者专用客户端程序来下达扫描任务，服务器端负载授权，执行扫描操作并提供扫描结果。 服务器层组件openvas-scanner(扫描器):负责调用各种漏洞检测插件，完成实际的扫描操作。openvas-manager(管理器):负责分配扫描任务，并根据扫描结果生产评估报告。 客户层组件openvas-cli(命令行接口):负责提供从命令行访问OpenVAS服务层程序。greenbone-security-assistant(安装助手):负责提供访问OpenVAS服务层的web接口，便于通过浏览器来执行扫描任务，是使用最简便的客户层组件。openvas安装 实验环境：fedora 27 in virtual box（关闭selinux） 1 更新系统软件 sudo yum update -y 2 安装openvas sudo yum intsall openvas* 3 安装redis数据库 sudo yum install redis* 4 安装sqlite3 sudo yum install sqlite3 5 安装证书生成工具 sudo yum install gnutls-utils 6 编译redis 配置文件 sudo vi /etc/redis.conf取消以下两行注释 12# unixsocket /tmp/redis.sock# unixsocketperm 700 7 运行redis服务 sudo redis-server /etc/redis.conf &amp;(&amp;守护程序，后台运行) 8 解决安装问题检查是否安装成功（openvas-check-setup命令指导安装openvas安装问题） 根据提示进一步操作 sudo openvas-check-setup –v9 按照fix提示，可需要如下命令 下载nvt库sudo greenbone-nvt-sync建立本地scapdata数据库sudo greenbone-scapdata-sync获取证书文件sudo grennbone-certdata-sync创建所需要的目录sudo mkdir -p /var/lib/openvas/openvasmd/gnupg/ (-p表示递归创建目录) 9启动scanner sudo openvassd 10 重建数据库 sudo openvasmd –rebuild 11创建用户admin sudo openvasmd –user=admin –new-password=password(password为自己所设密码) 12 生成证书 sudo openvas-manage-certs -a 13 启动greenbone security assistant sudo gsad –listen=127.0.0.1 –port=9392 14 启动openvas管理器 sudo openvassmd 使用openvas-check-setup -v9 出现it seem like your openvas-9 installation is ok 表示安装成功 登录openvas浏览器在浏览器输入https://127.0.0.1:9392(https不可省略)添加信任 advaced-&gt;add exception-&gt;confirm security exception登录admin 和所设密码进入openvas 补充知识需要对扫描配置做一些更改，为之后端口扫描准备 /var/lib/openvas/plugins/nmap.nasl 对nmap.nasl修改407:if(ver)改成if（svc）,411:log_message最后ver前面添加svc388:后面添加花括号，并且在418对花括号闭合413：svc改为string 最后重启openvass]]></content>
      <categories>
        <category>软件安装</category>
      </categories>
      <tags>
        <tag>openvass</tag>
        <tag>漏洞扫描</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[html学习笔记（一）]]></title>
    <url>%2F2018%2F02%2F07%2Fhtml%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[什么是html：html是一种网页描述语言，html使用标记标签来描述网页，web浏览器作用是读取html文档，并且以网页的形式显示它们，浏览器不会显示html标签，而是使用标签来解释页面的内容html基础知识—-html标题HTML 标题（Heading）是通过&lt; h1&gt; - &lt; h6&gt; 等标签进行定义的123&lt;h1&gt;This is a heading&lt;/h1&gt;&lt;h2&gt;This is a heading&lt;/h2&gt;&lt;h3&gt;This is a heading&lt;/h3&gt; html段落HTML 段落是通过 &lt; p&gt; 标签进行定义的。1&lt;p&gt;This is a paragraph.&lt;/p&gt; html链接HTML 链接是通过 &lt; a&gt; 标签进行定义的。1&lt;a href=&quot;http://www.baidu.com&quot;&gt;This is a link&lt;/a&gt; 注释：在 href 属性中指定链接的地址。 html图像HTML 图像是通过 &lt; img&gt; 标签进行定义的。1&lt;img src=&quot;w3school.jpg&quot; width=&quot;104&quot; height=&quot;142&quot; /&gt; HTML 标签对大小写不敏感：&lt; P&gt; 等同于 &lt; p&gt;许多网站都使用大写的 HTML 标签。 html水平线&lt; hr&gt; 标签在 HTML 页面中创建水平线。hr 元素可用于分隔内容。12&lt;p&gt;这是一个段落。&lt;/p&gt;&lt;hr&gt; html注释可以将注释插入HTML代码中，这样可以提高其可读性，使代码更易被人理解。浏览器会忽略注释，也不会显示它们1&lt;!-- 这是一个注释 --&gt; 可以将注释插入HTML代码中，这样可以提高其可读性，使代码更易被人理解。浏览器会忽略注释，也不会显示它们]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>网页</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python 面向对象]]></title>
    <url>%2F2018%2F02%2F07%2Fpython-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%2F</url>
    <content type="text"><![CDATA[相关描述： 类(Class): 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。类变量：类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用。数据成员：类变量或者实例变量, 用于处理类及其实例对象的相关的数据。方法重写：如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写。局部变量：定义在方法中的变量，只作用于当前实例的类。实例变量：在类的声明中，属性是用变量来表示的。这种变量就称为实例变量，是在类声明的内部但是在类的其他成员方法之外声明的。继承：即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。例如，有这样一个设计：一个Dog类型的对象派生自Animal类，这是模拟”是一个（is-a）”关系（例图，Dog是一个Animal）。实例化：创建一个类的实例，类的具体对象。方法：类中定义的函数。对象：通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法。tips：接触python半年了，一直就用着python基础的方法写一些简单的脚本，没有实现面向对象。在课堂上老师教过Java面向对象，可是自己上课没有认真去了解，靠着最]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux基本命令]]></title>
    <url>%2F2018%2F02%2F05%2Flinux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[linux基本命令Linux系统下基本命令（要区分大小写 ）uname 显示版本信息（同win2K的 ver）dir 显示当前目录文件,ls -al 显示包括隐藏文件（同win2K的 dir）pwd 查询当前所在的目录位置cd cd ..回到上一层目录，注意cd 与..之间有空格。cd /返回到根目录。cat 文件名 查看文件内容cat &gt;abc.txt 往abc.txt文件中写上内容。more 文件名 以一页一页的方式显示一个文本文件。cp 复制文件mv 移动文件rm 文件名 删除文件，rm -a 目录名删除目录及子目录mkdir 目录名 建立目录rmdir 删除子目录，目录内没有文档。chmod 设定档案或目录的存取权限grep 在档案中查找字符串diff 档案文件比较find 档案搜寻date 现在的日期、时间who 查询目前和你使用同一台机器的人以及Login时间地点w 查询目前上机者的详细资料whoami 查看自己的帐号名称groups 查看某人的Grouppasswd 更改密码history 查看自己下过的命令ps 显示进程状态kill 停止某进程gcc 黑客通常用它来编译C语言写的文件su 权限转换为指定使用者telnet IP telnet连接对方主机（同win2K），当出现bash$时就说明连接成功。ftp ftp连接上某服务器（同win2K）`]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python学习笔记]]></title>
    <url>%2F2018%2F02%2F05%2Fpython%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[python简介Python 是由 Guido van Rossum 在八十年代末和九十年代初，在荷兰国家数学和计算机科学研究所设计出来的。Python 本身也是由诸多其他语言发展而来的,这包括 ABC、Modula-3、C、C++、Algol-68、SmallTalk、Unix shell 和其他的脚本语言等等。像 Perl 语言一样，Python 源代码同样遵循 GPL(GNU General Public License)协议。现在 Python 是由一个核心开发团队在维护，Guido van Rossum 仍然占据着至关重要的作用，指导其进展。 1 Python 是一种解释型语言： 这意味着开发过程中没有了编译这个环节。类似于PHP和Perl语言。 Python 是交互式语言： 这意味着，您可以在一个Python提示符，直接互动执行写你的程序。 Python 是面向对象语言: 这意味着Python支持面向对象的风格或代码封装在对象的编程技术。 一：python安装 Python: https://www.python.org/ Python库的安装 1.使用pip工具：pip install 2.自定义安装：下载.exe文件，然后执行安装 3.通过.whl文件直接安装：下载.whl文件，并且安装了pip和wheel Python库文件的下载地址 &gt; http://www.lfd.uci.edu/~gohlke/pythonlibs/ pip install 库, 安装库* pip unstall 库名 卸载 pip search 库 搜索库 二：python语法及变量类型Python的变量命名规则： 1) 变量名称只能包含 字母，数字，下划线2) 变量名称只能以字母开头3) 变量名称不能和关键字相同4) 变量名称严格区分大小写5) 变量需要被赋值6) 一般在变量未赋值前不会引用 Python关键字： 1)函数，模块，类：def,import ,as，return,class,lambda，from2)逻辑运算符：is，not，or，and，false，true，none3)控制结构：break，continue，if，elif，else，for，in，while，pass，with4)错误处理：except，try，finally，raise5)其他：print,del,global,with,assert,yield,exec 类型转换 不同数据类型之间的转换：1) str(variable):转换成字符串，成功就转换，不成功就报错2) int(variable):试着将variable转换成整数,成功返回整数，否则返回valueerror3) bool(variable):转换布尔型，成功就转换4) float(variable): 转换成浮点型，成功就转换，不成功就报错 三：python运算符 Python中的运算符：1) 算术运算符：+ - / % //2) 比较(关系)运算符：== ，！=，&gt;&lt;,&gt;,&lt;,&gt;=,&lt;=3) 逻辑运算符：and ,or,ot4) 身份运算符：is,is,not,5) 集合(成员)运算符：in,not in6) 赋值运算符：= ，+= ，-=，=，/=,%=,/,//=7) 位运算符:&amp;,|,^,~,&lt;&lt;,&gt;&gt; 补充知识 1)help() 函数用于查看函数或模块用途的详细说明；help([object])2) dir() 函数用于获取对象的大部分相关属性；dir([object)3) doc(): 文档字符串，又称为DocStrings, 用它可以为我们的模块、类、函数等添加说明性的文字，使程序易读易懂，更重要的是可以通过Python自带的标准方法将这些描述性文字信息输出。 python自带的标准方法就是doc, 前后各两个下划线。 当不是函数、方法、模块等调用doc，而是具体对象调用时，会显示此对象从属的类型的构造函数的文档字符串]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
</search>
